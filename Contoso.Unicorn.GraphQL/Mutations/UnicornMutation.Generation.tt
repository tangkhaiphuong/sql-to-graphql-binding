<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Globalization" #>
<#@ include file="..\..\Configure.tt" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated.
// 
using System.Linq;
using Contoso.Unicorn.GraphQL.Attributes;
using Contoso.Unicorn.GraphQL.Types;
using GraphQL;
using GraphQL.Types;
using Contoso.Unicorn.GraphQL.Proxies;

namespace Contoso.Unicorn.GraphQL.Mutations
{
    /// <inheritdoc />
    [GraphQLAuthorize("default")]
    public sealed partial class UnicornMutation : ObjectGraphType
    {
        /// <inheritdoc />
        public UnicornMutation()
        {<#
        foreach(var table in GetUnicornDefinitions()) 
        {
            var tableName = table.Key.TableName;
            var schemaName = table.Key.SchemaName;
            if (schemaName != "dbo") continue;
#>

            Connection<<#= tableName #>Type>()
                .Name("<#= ToCamel(ToPlural(tableName)) #>")
                .Description("Mutate <#= ToHuman(tableName).ToLower() #> base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition.")
                .Argument<ListGraphType<StringGraphType>>("args", "List of arguments.")
                .Argument<NonNullGraphType<EnumerationGraphType<MutationAction>>>("action", "Action of mutation.")
                .Argument<<#= tableName #>InputType>("node", "Input of single node.")
                .Argument<StringGraphType>("template", "Input of single node.")
                .Argument<BooleanGraphType>("ignore", "Reverse action if predicate match.")
                .Argument<BooleanGraphType>("skip", "Skip action if predicate match.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time for each node.")
                .Argument<ListGraphType<<#= tableName #>InputType>>("nodes", "Input of multi node.")
                .Argument<ListGraphType<NonNullGraphType<StringGraphType>>>("fields", "Field include.")
                .Argument<StringGraphType>("ordering", "Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveMutation(_ => _.<#= ToPlural(tableName) #>, _ => new <#= tableName #>Proxy(_)));
<#
        }

        foreach(var schema in GetUnicornDefinitions().SelectMany(c => c).GroupBy(c => c["SchemaName"]))
        {
            var schemaName = schema.Key.ToString();

            if (schemaName == "dbo") continue;
#>

            Field<RootMutation<#= ToPascal(schemaName) #>Type>()
                .Name("<#= ToHuman(schemaName) #>").ToLower()
                .Description("Mutate <#= ToHuman(schemaName) #> schema base on criteria.").ToLower()
                .Resolve(context => new <#= ToPascal(schemaName) #>Proxy());
<#
        }
#>

            var methods = GetType().GetMethods()
                .Where(m => m.GetCustomAttributes(typeof(ConstructorAttribute), false).Length > 0);

            foreach (var item in methods) item.Invoke(this, null);
        }
    }
}
