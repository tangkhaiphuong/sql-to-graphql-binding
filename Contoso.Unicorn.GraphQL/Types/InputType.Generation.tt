<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Globalization" #>
<#@ include file="..\..\Configure.tt" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated.
// 
using System.Diagnostics.CodeAnalysis;
using System.CodeDom.Compiler;
using Contoso.Unicorn.GraphQL.Proxies;
<#
    foreach(var table in GetUnicornDefinitions()) 
    {
        var tableName = table.Key.TableName;
        var schemaName = table.Key.SchemaName;
#>

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types<#= schemaName == "dbo" ? "" : "." + ToPascal(schemaName)#>
{
    /// <summary>
    /// Definition input type of <#= ToHuman(tableName).ToLower() #>.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public partial class <#= tableName #>InputType : BaseProxyInputType<<#= schemaName == "dbo" ? "" : "global::Contoso.Unicorn.GraphQL.Proxies." + ToPascal(schemaName) + "."#><#= tableName #>Proxy>
    {
        /// <inheritdoc />
        public <#= tableName #>InputType() : base("<#= (schemaName == "dbo" ? "" : ToPascal(schemaName) + "_") + tableName #>Input")
        {
            Description = "<#= (schemaName == "dbo" ? "" : ToHuman(schemaName) + " ") + ToHuman(tableName).ToLower() #> input.";
<#
        foreach(var column in table)
        {
            var columnName = column["ColumnName"].ToString();

            if (columnName.Contains(" ")) continue;

            if (IsSkip(columnName)) continue;
#>

            Field(_ => _.<#= columnName #>, true).Description("Sets <#= ToHuman(columnName).ToLower() #>");
<#
    }#>
        }
    }
}
<#
    }
#>
