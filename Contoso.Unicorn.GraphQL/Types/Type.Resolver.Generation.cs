

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated.
// 
using System;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Collections.Generic;
using System.Threading.Tasks;
using Contoso.Unicorn.Entities;
using GraphQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using System.Linq.Dynamic.Core;
using GraphQL.Builders;
using GraphQL.Language.AST;
using System.Reflection;
using Fluid;
using GraphQL.Types.Relay.DataObjects;
using GraphQL.Relay.Types;
using System.Collections.Concurrent;
using Contoso.Unicorn.GraphQL.Proxies;
using Z.EntityFramework.Plus;
using Contoso.EFCore;

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition input type of category.
    /// </summary>
    public sealed partial class CategoryType
    {
        /// <inheritdoc />
        [SuppressMessage("ReSharper", "AsyncConverter.AsyncMethodNamingHighlighting")]
        public override async Task<CategoryProxy> GetById(IResolveFieldContext<object> resolveFieldContext, string id)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var queryable =
                from category_ in unicornContext.Categories.AsQueryable()
                where category_.Id == id
                select category_;

            var result = await queryable.WithHint(SqlServerTableHintFlags.NOLOCK, unicornContext.Categories.EntityType.ClrType).FirstOrDefaultAsync().ConfigureAwait(false);
            return new CategoryProxy(result);
        }

        /// <summary>
        /// Resolve product.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveProductsAsync(IResolveConnectionContext<CategoryProxy> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @base = resolveConnectionContext.Source;
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(ProductEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => ProductType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            var id = @base.Id;

            do
            {
                var queryable =
                    from product_ in unicornContext.Products.AsQueryable()
                    where product_.CategoryId == id
                    select product_;
                foreach (var link in links)
                {                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("base", @base);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                   .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                   .Select(columnList)
                   .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);

                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new ProductEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new ProductProxy(result) { Base = @base };
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            resolveConnectionContext.Source["products"] = result;

            return result;
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition input type of customer.
    /// </summary>
    public sealed partial class CustomerType
    {
        /// <inheritdoc />
        [SuppressMessage("ReSharper", "AsyncConverter.AsyncMethodNamingHighlighting")]
        public override async Task<CustomerProxy> GetById(IResolveFieldContext<object> resolveFieldContext, string id)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var queryable =
                from customer_ in unicornContext.Customers.AsQueryable()
                where customer_.Id == id
                select customer_;

            var result = await queryable.WithHint(SqlServerTableHintFlags.NOLOCK, unicornContext.Customers.EntityType.ClrType).FirstOrDefaultAsync().ConfigureAwait(false);
            return new CustomerProxy(result);
        }

        /// <summary>
        /// Resolve order.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveOrdersAsync(IResolveConnectionContext<CustomerProxy> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @base = resolveConnectionContext.Source;
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(OrderEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => OrderType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            var id = @base.Id;

            do
            {
                var queryable =
                    from order_ in unicornContext.Orders.AsQueryable()
                    where order_.CustomerId == id
                    select order_;
                foreach (var link in links)
                {                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("base", @base);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                   .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                   .Select(columnList)
                   .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);

                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new OrderEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new OrderProxy(result) { Base = @base };
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            resolveConnectionContext.Source["orders"] = result;

            return result;
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition input type of employee.
    /// </summary>
    public sealed partial class EmployeeType
    {
        /// <inheritdoc />
        [SuppressMessage("ReSharper", "AsyncConverter.AsyncMethodNamingHighlighting")]
        public override async Task<EmployeeProxy> GetById(IResolveFieldContext<object> resolveFieldContext, string id)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var queryable =
                from employee_ in unicornContext.Employees.AsQueryable()
                where employee_.Id == id
                select employee_;

            var result = await queryable.WithHint(SqlServerTableHintFlags.NOLOCK, unicornContext.Employees.EntityType.ClrType).FirstOrDefaultAsync().ConfigureAwait(false);
            return new EmployeeProxy(result);
        }

        /// <summary>
        /// Resolve employee.
        /// </summary>
        /// <param name="resolveFieldContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveEmployeeAsync(IResolveFieldContext<EmployeeProxy> resolveFieldContext)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var force = (bool)resolveFieldContext.UserContext["force"];
            var @base = resolveFieldContext.Source;

            var entityType = typeof(EmployeeEntity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var managerId = @base.ManagerId;

            var queryable =
                from employee_ in unicornContext.Employees.AsQueryable()
                where employee_.Id == managerId
                select employee_;

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            var columns = new HashSet<PropertyInfo>(resolveFieldContext.SubFields.Values
                .SelectMany(_ => EmployeeType.DependentFields.GetValueOrDefault(_.Name, Enumerable.Empty<string>()))
                .Select(entityType.GetProperty)
                .Where(_ => _ != null));

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var row = await queryable
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .Select(columnList)
                .OfType<object>()
                .FirstOrDefaultAsync().ConfigureAwait(false);

            if (row == null) return null;

            var result = new EmployeeEntity();

            var rowType = row.GetType();

            foreach (var property in columns)
                property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

            var employee = new EmployeeProxy(result) { Base = @base };

            resolveFieldContext.Source["employee"] = employee;

            return employee;
        }

        /// <summary>
        /// Resolve employee.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveEmployeesAsync(IResolveConnectionContext<EmployeeProxy> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @base = resolveConnectionContext.Source;
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(EmployeeEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => EmployeeType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            var id = @base.Id;

            do
            {
                var queryable =
                    from employee_ in unicornContext.Employees.AsQueryable()
                    where employee_.ManagerId == id
                    select employee_;
                foreach (var link in links)
                {
                    if (link.Key == "employee" && link.Value is IDictionary<string, object> employeeQueryLink)
                    {
                        entityTypes.Add(unicornContext.Employees.EntityType.ClrType);
                        switch (employeeQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Employees,
                                            @this => @this.ManagerId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                            })
                                        .Select(_ => _);

                                    if (employeeQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("base", @base);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (employeeQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Employees,
                                            @this => @this.ManagerId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                            })
                                        .SelectMany(
                                            that => that.employee.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                            })
                                        .Select(_ => _);

                                    if (employeeQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("base", @base);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (employeeQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }

                    if (link.Key == "order" && link.Value is IDictionary<string, object> orderQueryLink)
                    {
                        entityTypes.Add(unicornContext.Orders.EntityType.ClrType);
                        switch (orderQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Orders,
                                            @this => @this.Id,
                                            that => that.EmployeeId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                            })
                                        .Select(_ => _);

                                    if (orderQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("base", @base);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Orders,
                                            @this => @this.Id,
                                            that => that.EmployeeId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                            })
                                        .SelectMany(
                                            that => that.order.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                            })
                                        .Select(_ => _);

                                    if (orderQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("base", @base);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }
                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("base", @base);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                   .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                   .Select(columnList)
                   .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);

                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new EmployeeEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new EmployeeProxy(result) { Base = @base };
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            resolveConnectionContext.Source["employees"] = result;

            return result;
        }

        /// <summary>
        /// Resolve order.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveOrdersAsync(IResolveConnectionContext<EmployeeProxy> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @base = resolveConnectionContext.Source;
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(OrderEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => OrderType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            var id = @base.Id;

            do
            {
                var queryable =
                    from order_ in unicornContext.Orders.AsQueryable()
                    where order_.EmployeeId == id
                    select order_;
                foreach (var link in links)
                {
                    if (link.Key == "employee" && link.Value is IDictionary<string, object> employeeQueryLink)
                    {
                        entityTypes.Add(unicornContext.Employees.EntityType.ClrType);
                        switch (employeeQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Employees,
                                            @this => @this.EmployeeId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                            })
                                        .Select(_ => _);

                                    if (employeeQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("base", @base);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (employeeQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Employees,
                                            @this => @this.EmployeeId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                            })
                                        .SelectMany(
                                            that => that.employee.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                            })
                                        .Select(_ => _);

                                    if (employeeQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("base", @base);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (employeeQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }
                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("base", @base);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                   .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                   .Select(columnList)
                   .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);

                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new OrderEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new OrderProxy(result) { Base = @base };
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            resolveConnectionContext.Source["orders"] = result;

            return result;
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition input type of order.
    /// </summary>
    public sealed partial class OrderType
    {
        /// <inheritdoc />
        [SuppressMessage("ReSharper", "AsyncConverter.AsyncMethodNamingHighlighting")]
        public override async Task<OrderProxy> GetById(IResolveFieldContext<object> resolveFieldContext, string id)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var queryable =
                from order_ in unicornContext.Orders.AsQueryable()
                where order_.Id == id
                select order_;

            var result = await queryable.WithHint(SqlServerTableHintFlags.NOLOCK, unicornContext.Orders.EntityType.ClrType).FirstOrDefaultAsync().ConfigureAwait(false);
            return new OrderProxy(result);
        }

        /// <summary>
        /// Resolve customer.
        /// </summary>
        /// <param name="resolveFieldContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveCustomerAsync(IResolveFieldContext<OrderProxy> resolveFieldContext)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var force = (bool)resolveFieldContext.UserContext["force"];
            var @base = resolveFieldContext.Source;

            var entityType = typeof(CustomerEntity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var customerId = @base.CustomerId;

            var queryable =
                from customer_ in unicornContext.Customers.AsQueryable()
                where customer_.Id == customerId
                select customer_;

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            var columns = new HashSet<PropertyInfo>(resolveFieldContext.SubFields.Values
                .SelectMany(_ => CustomerType.DependentFields.GetValueOrDefault(_.Name, Enumerable.Empty<string>()))
                .Select(entityType.GetProperty)
                .Where(_ => _ != null));

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var row = await queryable
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .Select(columnList)
                .OfType<object>()
                .FirstOrDefaultAsync().ConfigureAwait(false);

            if (row == null) return null;

            var result = new CustomerEntity();

            var rowType = row.GetType();

            foreach (var property in columns)
                property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

            var customer = new CustomerProxy(result) { Base = @base };

            resolveFieldContext.Source["customer"] = customer;

            return customer;
        }

        /// <summary>
        /// Resolve employee.
        /// </summary>
        /// <param name="resolveFieldContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveEmployeeAsync(IResolveFieldContext<OrderProxy> resolveFieldContext)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var force = (bool)resolveFieldContext.UserContext["force"];
            var @base = resolveFieldContext.Source;

            var entityType = typeof(EmployeeEntity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var employeeId = @base.EmployeeId;

            var queryable =
                from employee_ in unicornContext.Employees.AsQueryable()
                where employee_.Id == employeeId
                select employee_;

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            var columns = new HashSet<PropertyInfo>(resolveFieldContext.SubFields.Values
                .SelectMany(_ => EmployeeType.DependentFields.GetValueOrDefault(_.Name, Enumerable.Empty<string>()))
                .Select(entityType.GetProperty)
                .Where(_ => _ != null));

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var row = await queryable
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .Select(columnList)
                .OfType<object>()
                .FirstOrDefaultAsync().ConfigureAwait(false);

            if (row == null) return null;

            var result = new EmployeeEntity();

            var rowType = row.GetType();

            foreach (var property in columns)
                property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

            var employee = new EmployeeProxy(result) { Base = @base };

            resolveFieldContext.Source["employee"] = employee;

            return employee;
        }

        /// <summary>
        /// Resolve shipper.
        /// </summary>
        /// <param name="resolveFieldContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveShipperAsync(IResolveFieldContext<OrderProxy> resolveFieldContext)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var force = (bool)resolveFieldContext.UserContext["force"];
            var @base = resolveFieldContext.Source;

            var entityType = typeof(ShipperEntity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var shipperId = @base.ShipperId;

            var queryable =
                from shipper_ in unicornContext.Shippers.AsQueryable()
                where shipper_.Id == shipperId
                select shipper_;

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            var columns = new HashSet<PropertyInfo>(resolveFieldContext.SubFields.Values
                .SelectMany(_ => ShipperType.DependentFields.GetValueOrDefault(_.Name, Enumerable.Empty<string>()))
                .Select(entityType.GetProperty)
                .Where(_ => _ != null));

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var row = await queryable
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .Select(columnList)
                .OfType<object>()
                .FirstOrDefaultAsync().ConfigureAwait(false);

            if (row == null) return null;

            var result = new ShipperEntity();

            var rowType = row.GetType();

            foreach (var property in columns)
                property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

            var shipper = new ShipperProxy(result) { Base = @base };

            resolveFieldContext.Source["shipper"] = shipper;

            return shipper;
        }

        /// <summary>
        /// Resolve order detail.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveOrderDetailsAsync(IResolveConnectionContext<OrderProxy> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @base = resolveConnectionContext.Source;
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(OrderDetailEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => OrderDetailType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            var id = @base.Id;

            do
            {
                var queryable =
                    from orderDetail_ in unicornContext.OrderDetails.AsQueryable()
                    where orderDetail_.OrderId == id
                    select orderDetail_;
                foreach (var link in links)
                {                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("base", @base);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                   .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                   .Select(columnList)
                   .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);

                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new OrderDetailEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new OrderDetailProxy(result) { Base = @base };
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            resolveConnectionContext.Source["orderDetails"] = result;

            return result;
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition input type of order detail.
    /// </summary>
    public sealed partial class OrderDetailType
    {
        /// <inheritdoc />
        [SuppressMessage("ReSharper", "AsyncConverter.AsyncMethodNamingHighlighting")]
        public override async Task<OrderDetailProxy> GetById(IResolveFieldContext<object> resolveFieldContext, string id)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var queryable =
                from orderDetail_ in unicornContext.OrderDetails.AsQueryable()
                where orderDetail_.Id == id
                select orderDetail_;

            var result = await queryable.WithHint(SqlServerTableHintFlags.NOLOCK, unicornContext.OrderDetails.EntityType.ClrType).FirstOrDefaultAsync().ConfigureAwait(false);
            return new OrderDetailProxy(result);
        }

        /// <summary>
        /// Resolve order.
        /// </summary>
        /// <param name="resolveFieldContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveOrderAsync(IResolveFieldContext<OrderDetailProxy> resolveFieldContext)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var force = (bool)resolveFieldContext.UserContext["force"];
            var @base = resolveFieldContext.Source;

            var entityType = typeof(OrderEntity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var orderId = @base.OrderId;

            var queryable =
                from order_ in unicornContext.Orders.AsQueryable()
                where order_.Id == orderId
                select order_;

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            var columns = new HashSet<PropertyInfo>(resolveFieldContext.SubFields.Values
                .SelectMany(_ => OrderType.DependentFields.GetValueOrDefault(_.Name, Enumerable.Empty<string>()))
                .Select(entityType.GetProperty)
                .Where(_ => _ != null));

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var row = await queryable
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .Select(columnList)
                .OfType<object>()
                .FirstOrDefaultAsync().ConfigureAwait(false);

            if (row == null) return null;

            var result = new OrderEntity();

            var rowType = row.GetType();

            foreach (var property in columns)
                property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

            var order = new OrderProxy(result) { Base = @base };

            resolveFieldContext.Source["order"] = order;

            return order;
        }

        /// <summary>
        /// Resolve product.
        /// </summary>
        /// <param name="resolveFieldContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveProductAsync(IResolveFieldContext<OrderDetailProxy> resolveFieldContext)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var force = (bool)resolveFieldContext.UserContext["force"];
            var @base = resolveFieldContext.Source;

            var entityType = typeof(ProductEntity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var productId = @base.ProductId;

            var queryable =
                from product_ in unicornContext.Products.AsQueryable()
                where product_.Id == productId
                select product_;

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            var columns = new HashSet<PropertyInfo>(resolveFieldContext.SubFields.Values
                .SelectMany(_ => ProductType.DependentFields.GetValueOrDefault(_.Name, Enumerable.Empty<string>()))
                .Select(entityType.GetProperty)
                .Where(_ => _ != null));

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var row = await queryable
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .Select(columnList)
                .OfType<object>()
                .FirstOrDefaultAsync().ConfigureAwait(false);

            if (row == null) return null;

            var result = new ProductEntity();

            var rowType = row.GetType();

            foreach (var property in columns)
                property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

            var product = new ProductProxy(result) { Base = @base };

            resolveFieldContext.Source["product"] = product;

            return product;
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition input type of product.
    /// </summary>
    public sealed partial class ProductType
    {
        /// <inheritdoc />
        [SuppressMessage("ReSharper", "AsyncConverter.AsyncMethodNamingHighlighting")]
        public override async Task<ProductProxy> GetById(IResolveFieldContext<object> resolveFieldContext, string id)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var queryable =
                from product_ in unicornContext.Products.AsQueryable()
                where product_.Id == id
                select product_;

            var result = await queryable.WithHint(SqlServerTableHintFlags.NOLOCK, unicornContext.Products.EntityType.ClrType).FirstOrDefaultAsync().ConfigureAwait(false);
            return new ProductProxy(result);
        }

        /// <summary>
        /// Resolve supplier.
        /// </summary>
        /// <param name="resolveFieldContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveSupplierAsync(IResolveFieldContext<ProductProxy> resolveFieldContext)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var force = (bool)resolveFieldContext.UserContext["force"];
            var @base = resolveFieldContext.Source;

            var entityType = typeof(SupplierEntity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var supplierId = @base.SupplierId;

            var queryable =
                from supplier_ in unicornContext.Suppliers.AsQueryable()
                where supplier_.Id == supplierId
                select supplier_;

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            var columns = new HashSet<PropertyInfo>(resolveFieldContext.SubFields.Values
                .SelectMany(_ => SupplierType.DependentFields.GetValueOrDefault(_.Name, Enumerable.Empty<string>()))
                .Select(entityType.GetProperty)
                .Where(_ => _ != null));

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var row = await queryable
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .Select(columnList)
                .OfType<object>()
                .FirstOrDefaultAsync().ConfigureAwait(false);

            if (row == null) return null;

            var result = new SupplierEntity();

            var rowType = row.GetType();

            foreach (var property in columns)
                property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

            var supplier = new SupplierProxy(result) { Base = @base };

            resolveFieldContext.Source["supplier"] = supplier;

            return supplier;
        }

        /// <summary>
        /// Resolve category.
        /// </summary>
        /// <param name="resolveFieldContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveCategoryAsync(IResolveFieldContext<ProductProxy> resolveFieldContext)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var force = (bool)resolveFieldContext.UserContext["force"];
            var @base = resolveFieldContext.Source;

            var entityType = typeof(CategoryEntity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var categoryId = @base.CategoryId;

            var queryable =
                from category_ in unicornContext.Categories.AsQueryable()
                where category_.Id == categoryId
                select category_;

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            var columns = new HashSet<PropertyInfo>(resolveFieldContext.SubFields.Values
                .SelectMany(_ => CategoryType.DependentFields.GetValueOrDefault(_.Name, Enumerable.Empty<string>()))
                .Select(entityType.GetProperty)
                .Where(_ => _ != null));

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var row = await queryable
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .Select(columnList)
                .OfType<object>()
                .FirstOrDefaultAsync().ConfigureAwait(false);

            if (row == null) return null;

            var result = new CategoryEntity();

            var rowType = row.GetType();

            foreach (var property in columns)
                property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

            var category = new CategoryProxy(result) { Base = @base };

            resolveFieldContext.Source["category"] = category;

            return category;
        }

        /// <summary>
        /// Resolve order detail.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveOrderDetailsAsync(IResolveConnectionContext<ProductProxy> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @base = resolveConnectionContext.Source;
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(OrderDetailEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => OrderDetailType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            var id = @base.Id;

            do
            {
                var queryable =
                    from orderDetail_ in unicornContext.OrderDetails.AsQueryable()
                    where orderDetail_.ProductId == id
                    select orderDetail_;
                foreach (var link in links)
                {                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("base", @base);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                   .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                   .Select(columnList)
                   .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);

                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new OrderDetailEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new OrderDetailProxy(result) { Base = @base };
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            resolveConnectionContext.Source["orderDetails"] = result;

            return result;
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition input type of shipper.
    /// </summary>
    public sealed partial class ShipperType
    {
        /// <inheritdoc />
        [SuppressMessage("ReSharper", "AsyncConverter.AsyncMethodNamingHighlighting")]
        public override async Task<ShipperProxy> GetById(IResolveFieldContext<object> resolveFieldContext, string id)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var queryable =
                from shipper_ in unicornContext.Shippers.AsQueryable()
                where shipper_.Id == id
                select shipper_;

            var result = await queryable.WithHint(SqlServerTableHintFlags.NOLOCK, unicornContext.Shippers.EntityType.ClrType).FirstOrDefaultAsync().ConfigureAwait(false);
            return new ShipperProxy(result);
        }

        /// <summary>
        /// Resolve order.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveOrdersAsync(IResolveConnectionContext<ShipperProxy> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @base = resolveConnectionContext.Source;
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(OrderEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => OrderType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            var id = @base.Id;

            do
            {
                var queryable =
                    from order_ in unicornContext.Orders.AsQueryable()
                    where order_.ShipperId == id
                    select order_;
                foreach (var link in links)
                {                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("base", @base);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                   .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                   .Select(columnList)
                   .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);

                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new OrderEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new OrderProxy(result) { Base = @base };
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            resolveConnectionContext.Source["orders"] = result;

            return result;
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition input type of supplier.
    /// </summary>
    public sealed partial class SupplierType
    {
        /// <inheritdoc />
        [SuppressMessage("ReSharper", "AsyncConverter.AsyncMethodNamingHighlighting")]
        public override async Task<SupplierProxy> GetById(IResolveFieldContext<object> resolveFieldContext, string id)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var queryable =
                from supplier_ in unicornContext.Suppliers.AsQueryable()
                where supplier_.Id == id
                select supplier_;

            var result = await queryable.WithHint(SqlServerTableHintFlags.NOLOCK, unicornContext.Suppliers.EntityType.ClrType).FirstOrDefaultAsync().ConfigureAwait(false);
            return new SupplierProxy(result);
        }

        /// <summary>
        /// Resolve product.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> ResolveProductsAsync(IResolveConnectionContext<SupplierProxy> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @base = resolveConnectionContext.Source;
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(ProductEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => ProductType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            var id = @base.Id;

            do
            {
                var queryable =
                    from product_ in unicornContext.Products.AsQueryable()
                    where product_.SupplierId == id
                    select product_;
                foreach (var link in links)
                {                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("base", @base);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                   .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                   .Select(columnList)
                   .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);

                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new ProductEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new ProductProxy(result) { Base = @base };
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            resolveConnectionContext.Source["products"] = result;

            return result;
        }
    }
}
