<#@ template language="C#" hostspecific="True" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Globalization" #>
<#@ include file="..\..\Configure.tt" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated.
// 
using System.Diagnostics.CodeAnalysis;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using GraphQL.Types;
<#
    var relationships = GetRelationships(Path.Combine(this.Host.ResolvePath(string.Empty) , @"..\..\Relationship.xml"));

    var comparer =
        CreateEqualityComparer<Node>((
        left, right) => left.Schema == right.Schema && left.Name == right.Name);

    var tables = relationships.Select(c => c.Start).Concat(relationships.Select(c => c.End)).Distinct(comparer).OrderBy(c => c.Name).ToList();

    foreach(var table in tables)
    {
        var links = relationships.Where(c => c.Start.Name == table.Name).Select(c => c.End).Concat(
            relationships.Where(c => c.End.Name == table.Name).Select(c => c.Start)).Distinct(comparer)
            .ToList();

        if (links.Count == 0) continue;

        var schemaName = table.Schema;

#>

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types<#= schemaName == "dbo" ? "" : "." + ToPascal(schemaName)#>
{
    /// <summary>
    /// Definition link input type of <#= ToHuman(table.Name).ToLower() #>.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public sealed partial class <#= table.Name #>LinkInputType : InputObjectGraphType<IDictionary<string, object>>
    {
        /// <inheritdoc />
        public <#= table.Name #>LinkInputType()
        {
            Name = "<#=(schemaName == "dbo" ? "" : ToPascal(schemaName) + "_") + table.Name #>LinkInput";

            Description = "<#= (schemaName == "dbo" ? "" : ToHuman(schemaName).ToLower() + " ") + ToHuman(table.Name).ToLower() #> link input.";
<#
        foreach(var item in links)
        {
#>

            Field(typeof(LinkArgumentInputType), "<#= ToCamel(item.Name) #>", "Sets <#= ToHuman(item.Name).ToLower() #> link.");
<#
    }
#>
        }
    }
}
<#
    }
#>
