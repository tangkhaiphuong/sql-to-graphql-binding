<#@ template language="C#" hostspecific="True" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Globalization" #>
<#@ include file="..\..\Configure.tt" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated.
// 
using System;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.Collections.Generic;
using System.Threading.Tasks;
using Contoso.Unicorn.Entities;
using GraphQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.DependencyInjection;
using System.Linq.Dynamic.Core;
using GraphQL.Builders;
using GraphQL.Language.AST;
using System.Reflection;
using Fluid;
using GraphQL.Types.Relay.DataObjects;
using GraphQL.Relay.Types;
using System.Collections.Concurrent;
using Contoso.Unicorn.GraphQL.Proxies;
using Z.EntityFramework.Plus;
using Contoso.EFCore;
<#
    var relationships = GetRelationships(Path.Combine(this.Host.ResolvePath(string.Empty) , @"..\..\Relationship.xml"));

    foreach(var table in GetUnicornDefinitions()) 
    {
        var tableName = table.Key.TableName;
        var schemaName = table.Key.SchemaName;

        var prefixEntity = schemaName == "dbo" ? "": "Entities." + ToPascal(schemaName) + ".";
        var prefixProxy = schemaName == "dbo" ? "" : "Proxies." + ToPascal(schemaName) + ".";
        var prefixNamespace = schemaName == "dbo" ? "" : ToPascal(schemaName) + ".";
        var prefixType = schemaName == "dbo" ? "" : "Types." + ToPascal(schemaName) + ".";
#>

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types<#= schemaName == "dbo" ? "" : "." + ToPascal(schemaName)#>
{
    /// <summary>
    /// Definition input type of <#= ToHuman(tableName).ToLower() #>.
    /// </summary>
    public sealed partial class <#= tableName #>Type
    {
        /// <inheritdoc />
        [SuppressMessage("ReSharper", "AsyncConverter.AsyncMethodNamingHighlighting")]
        public override async Task<<#= prefixProxy + tableName #>Proxy> GetById(IResolveFieldContext<object> resolveFieldContext, string id)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var queryable =
                from <#= ToCamel(tableName)#>_ in unicornContext.<#= prefixNamespace + ToPlural(tableName) #>.AsQueryable()
                where <#= ToCamel(tableName)#>_.Id == id
                select <#= ToCamel(tableName)#>_;

            var result = await queryable.WithHint(SqlServerTableHintFlags.NOLOCK, unicornContext.<#= prefixNamespace + ToPlural(tableName) #>.EntityType.ClrType).FirstOrDefaultAsync().ConfigureAwait(false);
            return new <#= prefixProxy + tableName #>Proxy(result);
        }
<#
        foreach(var item in relationships)
        {
            var isParent = string.Equals(item.Start.Name, tableName, StringComparison.OrdinalIgnoreCase);

            if (!isParent) continue;
            
            var prefixStartEntity = item.Start.Schema == "dbo" ? "": "Entities." + ToPascal(item.Start.Schema) + ".";
            var prefixStartProxy = item.Start.Schema == "dbo" ? "" : "Proxies." + ToPascal(item.Start.Schema) + ".";
            var prefixStartNamespace = item.Start.Schema == "dbo" ? "" : ToPascal(item.Start.Schema) + ".";
            var prefixStartType = item.Start.Schema == "dbo" ? "" : "Types." + ToPascal(item.Start.Schema) + ".";
            var prefixEndEntity = item.End.Schema == "dbo" ? "": "Entities." + ToPascal(item.End.Schema) + ".";
            var prefixEndProxy = item.End.Schema == "dbo" ? "" : "Proxies." + ToPascal(item.End.Schema) + ".";
            var prefixEndNamespace = item.End.Schema == "dbo" ? "" : ToPascal(item.End.Schema) + ".";
            var prefixEndType = item.End.Schema == "dbo" ? "" : "Types." + ToPascal(item.End.Schema) + ".";
#>

        /// <summary>
        /// Resolve <#= ToHuman(item.End.Name).ToLower() #>.
        /// </summary>
        /// <param name="resolveFieldContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> Resolve<#= item.End.Name #>Async(IResolveFieldContext<<#= prefixProxy + tableName #>Proxy> resolveFieldContext)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var force = (bool)resolveFieldContext.UserContext["force"];
            var @base = resolveFieldContext.Source;

            var entityType = typeof(<#= prefixEndEntity + item.End.Name #>Entity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var <#= ToCamel(item.Start.Key) #> = @base.<#= item.Start.Key #>;

<#
            if (item.Routes == null || item.Routes.Length == 0)
            {
#>
            var queryable =
                from <#= ToCamel(item.End.Name) #>_ in unicornContext.<#= prefixEndNamespace + ToPlural(item.End.Name) #>.AsQueryable()
                where <#= ToCamel(item.End.Name) #>_.<#= item.End.Key #> == <#= ToCamel(item.Start.Key) #>
                select <#= ToCamel(item.End.Name) #>_;
<#
            }
            else
            {
                foreach(var route in item.Routes.Reverse())
                {
#>
            entityTypes.Add(unicornContext.<#= prefixNamespace + ToPlural(route.Item1.Name) #>.EntityType.ClrType);
<#
                }
#>
            var queryable =
                from <#= ToCamel(item.End.Name) #>_ in unicornContext.<#= prefixEndNamespace + ToPlural(item.End.Name) #>.AsQueryable()
<#
                var lastTable = item.End.Name;
                var lastField = item.End.Key;
                foreach(var route in item.Routes.Reverse())
                {
#>
                join <#= ToCamel(route.Item1.Name) #>_ in unicornContext.<#= prefixNamespace + ToPlural(route.Item1.Name) #>.AsQueryable()
                on <#= ToCamel(lastTable) #>_.<#= lastField #> equals <#= ToCamel(route.Item1.Name) #>_.<#= route.Item2.Key  #>
<#
                    lastTable = route.Item1.Name;
                    lastField = route.Item1.Key;
                }
#>
                where <#= ToCamel(item.Routes[0].Item1.Name) #>_.<#= item.Routes[0].Item1.Key #> == <#= ToCamel(item.Start.Key) #>
<#
                foreach(var route in item.Routes)
                {
#>
                && (!force || <#= ToCamel(route.Item1.Name) #>_.DeletedDate == null)
<#
                }
#>
                select <#= ToCamel(item.End.Name) #>_;
<#
            }
#>

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            var columns = new HashSet<PropertyInfo>(resolveFieldContext.SubFields.Values
                .SelectMany(_ => <#= prefixEndType + item.End.Name #>Type.DependentFields.GetValueOrDefault(_.Name, Enumerable.Empty<string>()))
                .Select(entityType.GetProperty)
                .Where(_ => _ != null));

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var row = await queryable
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .Select(columnList)
                .OfType<object>()
                .FirstOrDefaultAsync().ConfigureAwait(false);

            if (row == null) return null;

            var result = new <#= prefixEndEntity + item.End.Name #>Entity();

            var rowType = row.GetType();

            foreach (var property in columns)
                property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

            var <#= ToCamel(item.End.Name) #> = new <#= prefixEndProxy + item.End.Name #>Proxy(result) { Base = @base };

            resolveFieldContext.Source["<#=ToCamel(item.End.Name)#>"] = <#= ToCamel(item.End.Name) #>;

            return <#= ToCamel(item.End.Name) #>;
        }
<#
        }

        foreach(var relationship in relationships)
        {
            var isChild = string.Equals(relationship.End.Name, tableName, StringComparison.OrdinalIgnoreCase);

            if (!isChild) continue;

            var links = relationships.Where(c => c.Start.Name == tableName).Select(c => c.End.Name).Concat(
                            relationships.Where(c => c.End.Name == tableName).Select(c => c.Start.Name)).Distinct()
                            .ToList();

            var prefixStartEntity = relationship.Start.Schema == "dbo" ? "": "Entities." + ToPascal(relationship.Start.Schema) + ".";
            var prefixStartProxy = relationship.Start.Schema == "dbo" ? "" : "Proxies." + ToPascal(relationship.Start.Schema) + ".";
            var prefixStartNamespace = relationship.Start.Schema == "dbo" ? "" : ToPascal(relationship.Start.Schema) + ".";
            var prefixStartType = relationship.Start.Schema == "dbo" ? "" : "Types." + ToPascal(relationship.Start.Schema) + ".";
            var prefixEndEntity = relationship.End.Schema == "dbo" ? "": "Entities." + ToPascal(relationship.End.Schema) + ".";
            var prefixEndProxy = relationship.End.Schema == "dbo" ? "" : "Proxies." + ToPascal(relationship.End.Schema) + ".";
            var prefixEndNamespace = relationship.End.Schema == "dbo" ? "" : ToPascal(relationship.End.Schema) + ".";
            var prefixEndType = relationship.End.Schema == "dbo" ? "" : "Types." + ToPascal(relationship.End.Schema) + ".";
#>

        /// <summary>
        /// Resolve <#= ToHuman(relationship.Start.Name).ToLower() #>.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> Resolve<#= ToPlural(relationship.Start.Name) #>Async(IResolveConnectionContext<<#= prefixProxy + tableName #>Proxy> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @base = resolveConnectionContext.Source;
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
<#
            if (links.Count > 0)
            {
#>
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();
<#
            }
#>

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(<#= prefixStartEntity + relationship.Start.Name #>Entity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => <#= prefixStartType + relationship.Start.Name #>Type.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            var <#= ToCamel(relationship.End.Key) #> = @base.<#= relationship.End.Key #>;

            do
            {
<#
            if (relationship.Routes == null || relationship.Routes.Length == 0)
            {
#>
                var queryable =
                    from <#= ToCamel(relationship.Start.Name) #>_ in unicornContext.<#= prefixStartNamespace #><#= ToPlural(relationship.Start.Name) #>.AsQueryable()
                    where <#= ToCamel(relationship.Start.Name) #>_.<#= relationship.Start.Key #> == <#= ToCamel(relationship.End.Key) #>
                    select <#= ToCamel(relationship.Start.Name) #>_;
<#
            }
            else
            {
                foreach(var route in relationship.Routes)
                {
#>
                entityTypes.Add(unicornContext.<#= prefixNamespace #><#= ToPlural(route.Item1.Name) #>.EntityType.ClrType);
<#
                }
#>
                var queryable =
                    from <#= ToCamel(relationship.Start.Name) #>_ in unicornContext.<#= prefixStartNamespace #><#= ToPlural(relationship.Start.Name) #>.AsQueryable()
<#
                var lastTable = relationship.Start.Name;
                var lastField = relationship.Start.Key;
                foreach(var route in relationship.Routes)
                {
#>
                    join <#= ToCamel(route.Item1.Name) #>_ in unicornContext.<#= prefixNamespace #><#= ToPlural(route.Item1.Name) #>.AsQueryable()
                    on <#= ToCamel(lastTable) #>_.<#= lastField #> equals <#= ToCamel(route.Item1.Name) #>_.<#= route.Item1.Key  #>
<#
                    lastTable = route.Item2.Name;
                    lastField = route.Item2.Key;
                }
#>
                    where <#= ToCamel(relationship.Routes[relationship.Routes.Length - 1].Item2.Name) #>_.<#= relationship.Routes[relationship.Routes.Length - 1].Item2.Key #> == <#= ToCamel(relationship.End.Key) #>
<#
                foreach(var route in relationship.Routes)
                {
#>
                    && (!force || <#= ToCamel(route.Item1.Name) #>_.DeletedDate == null)
<#
                }
#>
                    select <#= ToCamel(relationship.Start.Name) #>_;

<#
            }

            if (links.Count > 0)
            {
#>
                foreach (var link in links)
                {<#
            }
            foreach (var link in links)
            {
                var node = relationships.FirstOrDefault(c =>
                    c.Start.Name == link && c.End.Name == relationship.Start.Name ||
                    c.End.Name == link && c.Start.Name == relationship.Start.Name);

                if (node == null) continue;

                var isSwap = node.Start.Name == relationship.Start.Name;
#>

                    if (link.Key == "<#= ToCamel(link) #>" && link.Value is IDictionary<string, object> <#= ToCamel(link) #>QueryLink)
                    {
<#
                do {
                    var nodes = new List<Tuple<Node, Node>>();

                    nodes.Add(isSwap ? Tuple.Create(node.Start, node.Start) : Tuple.Create(node.End, node.End));

                    nodes.AddRange(isSwap ? node.Routes : node.Routes.Select(c => Tuple.Create(c.Item2, c.Item1)).Reverse());

                    nodes.Add(isSwap ? Tuple.Create(node.End, node.End) : Tuple.Create(node.Start, node.Start));

                    for (var index = 1; index < nodes.Count; ++index)
                    {
#>
                        entityTypes.Add(unicornContext.<#= (nodes[index].Item1.Schema == "dbo" ? "" : ToPascal(nodes[index].Item1.Schema) + ".") + ToPlural(nodes[index].Item1.Name) #>.EntityType.ClrType);
<#
                    }
                } while(false);
#>
                        switch (<#= ToCamel(link) #>QueryLink["all"])
                        {
<#
                foreach (var type in new[] {"false", "true"})
                {
#>
                            case <#= type #>:
                                {
<#
                    var nodes = new List<Tuple<Node, Node>>();

                    nodes.Add(isSwap ? Tuple.Create(node.Start, node.Start) : Tuple.Create(node.End, node.End));

                    nodes.AddRange(isSwap ? node.Routes : node.Routes.Select(c => Tuple.Create(c.Item2, c.Item1)).Reverse());

                    nodes.Add(isSwap ? Tuple.Create(node.End, node.End) : Tuple.Create(node.Start, node.Start));

#>
                                    var queryableLink = queryable
<#
                            for (var index = 1; index < nodes.Count; ++index)
                            {
#>
                                        .<#= type == "false" ? "Join": "GroupJoin" #>(
                                            unicornContext.<#= (nodes[index].Item1.Schema == "dbo" ? "" : ToPascal(nodes[index].Item1.Schema) + ".") + ToPlural(nodes[index].Item1.Name) #>,
                                            @this => @this<#= index == 1 ? "" : "." + ToCamel(nodes[index - 1].Item2.Name) #>.<#= nodes[index - 1].Item2.Key #>,
                                            that => that.<#= nodes[index].Item1.Key #>,
                                            (@this, that) => new
                                            {
                                                @this<#= index == 1 ? "" : ".@this"  #>,
<#
                                for (var index2 = 2; index2 <= index; ++index2)
                                {
#>
                                                @this.<#= ToCamel(nodes[index2 - 1].Item1.Name) #>,
<#
                                }
#>
                                                <#= ToCamel(nodes[index].Item1.Name) #> = that
                                            })
<#                              if (type != "false")
                                {
#>
                                        .SelectMany(
                                            that => that.<#= ToCamel(nodes[index].Item1.Name) #>.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this<#= index == 1 ? "" : ".@this"  #>,
<#
                                for (var index2 = 2; index2 <= index; ++index2)
                                {
#>
                                                @this.<#= ToCamel(nodes[index2 - 1].Item1.Name) #>,
<#
                                }
#>
                                                <#= ToCamel(nodes[index].Item1.Name) #> = that
                                            })
<#
                                }
                            }
#>
                                        .Select(_ => _);

                                    if (<#= ToCamel(link) #>QueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("base", @base);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (<#= ToCamel(link) #>QueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _<#= type == "false" ? "": ".@this" #>.@this);

                                    break;
                                }
<#
                }
#>
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }
<#
            }
            if (links.Count > 0)
            {
#>
                }
<#
            }
#>
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("base", @base);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object> { { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

<#
if (links.Count > 0)
{
#>
                if (unique && multiple == false) queryable = queryable.Distinct();
<#
}
#>

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                   .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                   .Select(columnList)
                   .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);

                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new <#= prefixStartEntity + relationship.Start.Name #>Entity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new <#= prefixStartProxy + relationship.Start.Name #>Proxy(result) { Base = @base };
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            resolveConnectionContext.Source["<#= ToPlural(ToCamel(relationship.Start.Name))#>"] = result;

            return result;
        }
<#
        }
#>
    }
}
<#
    }

    foreach(var schema in GetUnicornDefinitions().SelectMany(c => c).GroupBy(c => c["SchemaName"]))
    {
        var schemaName = schema.Key.ToString();

        if (schemaName == "dbo") continue;

        var prefixEntity = "Entities." + ToPascal(schemaName) + ".";
        var prefixProxy = "Proxies." + ToPascal(schemaName) + ".";
        var prefixNamespace = ToPascal(schemaName) + ".";
        var prefixType = "Types." + ToPascal(schemaName) + ".";
#>

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    public sealed partial class RootQuery<#= ToPascal(schemaName) #>Type
    {
<#
    foreach(var table in schema.GroupBy(c => c["TableName"]))
    {
        var tableName = table.Key.ToString();

        var links = relationships.Where(c => c.Start.Name == tableName).Select(c => c.End.Name).Concat(
            relationships.Where(c => c.End.Name == tableName).Select(c => c.Start.Name)).Distinct()
            .ToList();

#>
        /// <summary>
        /// Resolve <#= ToHuman(tableName).ToLower() #>.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private static async Task<object> Resolve<#= ToPlural(tableName) #>Async(IResolveConnectionContext<object> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
<#
            if (links.Count > 0)
            {
#>
            var link = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link");
<#
            }
#>

            var entityType = typeof(<#= prefixEntity + tableName #>Entity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var queryable = unicornContext.<#= prefixNamespace + ToPlural(tableName) #>.AsQueryable();
<#
            foreach (var link in links)
            {
                var node = relationships.FirstOrDefault(c =>
                    c.Start.Name == link && c.End.Name == tableName ||
                    c.End.Name == link && c.Start.Name == tableName);

                if (node == null) continue;

                var isSwap = node.Start.Name == tableName;
#>

            if (link != null &&
                link.TryGetValue("<#= ToCamel(link) #>", out var <#= ToCamel(link) #>QueryLinkObj) &&
                <#= ToCamel(link) #>QueryLinkObj is IDictionary<string, object> <#= ToCamel(link) #>QueryLink)
            {

<#
                do {
                    var nodes = new List<Tuple<Node, Node>>();

                    nodes.Add(isSwap ? Tuple.Create(node.Start, node.Start) : Tuple.Create(node.End, node.End));

                    nodes.AddRange(isSwap ? node.Routes : node.Routes.Select(c => Tuple.Create(c.Item2, c.Item1)).Reverse());

                    nodes.Add(isSwap ? Tuple.Create(node.End, node.End) : Tuple.Create(node.Start, node.Start));

                    for (var index = 1; index < nodes.Count; ++index)
                    {
#>
                        entityTypes.Add(unicornContext.<#= (nodes[index].Item1.Schema == "dbo" ? "" : ToPascal(nodes[index].Item1.Schema) + ".") + ToPlural(nodes[index].Item1.Name) #>.EntityType.ClrType);
<#
                    }
                } while(false);
#>

                switch (<#= ToCamel(link) #>QueryLink["all"])
                {
<#
                foreach (var type in new[] {"false", "true"})
                {
#>
                    case <#= type #>:
                        {
<#
                    var nodes = new List<Tuple<Node, Node>>();

                    nodes.Add(isSwap ? Tuple.Create(node.Start, node.Start) : Tuple.Create(node.End, node.End));

                    nodes.AddRange(isSwap ? node.Routes : node.Routes.Select(c => Tuple.Create(c.Item2, c.Item1)).Reverse());

                    nodes.Add(isSwap ? Tuple.Create(node.End, node.End) : Tuple.Create(node.Start, node.Start));

#>
                            var queryableLink = queryable
<#
                            for (var index = 1; index < nodes.Count; ++index)
                            {
#>
                                .<#= type == "false" ? "Join": "GroupJoin" #>(
                                    unicornContext.<#= (nodes[index].Item1.Schema == "dbo" ? "" : ToPascal(nodes[index].Item1.Schema) + ".") + ToPlural(nodes[index].Item1.Name) #>,
                                    @this => @this<#= index == 1 ? "" : "." + ToCamel(nodes[index - 1].Item2.Name) #>.<#= nodes[index - 1].Item2.Key #>,
                                    that => that.<#= nodes[index].Item1.Key #>,
                                    (@this, that) => new
                                    {
                                        @this<#= index == 1 ? "" : ".@this"  #>,
<#
                                for (var index2 = 2; index2 <= index; ++index2)
                                {
#>
                                        @this.<#= ToCamel(nodes[index2 - 1].Item1.Name) #>,
<#
                                }
#>
                                        <#= ToCamel(nodes[index].Item1.Name) #> = that
                                    })
<#                              if (type != "false")
                                {
#>
                                .SelectMany(
                                    that => that.<#= ToCamel(nodes[index].Item1.Name) #>.DefaultIfEmpty(),
                                    (@this, that) => new
                                    {
                                        @this<#= index == 1 ? "" : ".@this"  #>,
<#
                                for (var index2 = 2; index2 <= index; ++index2)
                                {
#>
                                        @this.<#= ToCamel(nodes[index2 - 1].Item1.Name) #>,
<#
                                }
#>
                                        <#= ToCamel(nodes[index].Item1.Name) #> = that
                                    })
<#
                                }
                            }
#>
                                .Select(_ => _);

                            if (<#= ToCamel(link) #>QueryLink.TryGetValue("predicate", out var predicateObj) &&
                                predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                            {
                                var templateContext = new TemplateContext(templateOptions);
                                templateContext.SetValue("global", (templateContext.Model as IDictionary<string, object>)["global"]);
                                templateContext.SetValue("args", args);

                                if (isEnabledLiquid)
                                {
                                    predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                    predicateLink = predicateLink?.Trim();
                                }

                                if (!string.IsNullOrEmpty(predicateLink))
                                {
                                    if (<#= ToCamel(link) #>QueryLink.TryGetValue("args", out var argsObj) &&
                                        argsObj is IEnumerable<object> argsLink)
                                        queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                    else
                                        queryableLink = queryableLink.Where(predicateLink);
                                }
                            }

                            queryable = queryableLink.Select(_ => _<#= type == "false" ? "": ".@this" #>.@this);

                            break;
                        }
<#
                }
#>
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }
<#
                
            }
#>

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            if (!string.IsNullOrEmpty(predicate))
            {
                var templateContext = new TemplateContext(templateOptions);
                templateContext.SetValue("global", @global);
                templateContext.SetValue("args", args);

                if (isEnabledLiquid)
                {
                    predicate = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                    predicate = predicate?.Trim();
                }

                if (!string.IsNullOrEmpty(predicate))
                {
                    if (args == null)
                        queryable = queryable.Where(predicate);
                    else
                        queryable = queryable.Where(predicate, args);
                }
            }

            if (unique) queryable = queryable.Distinct();

            if (!string.IsNullOrEmpty(ordering))
                queryable = queryable.OrderBy(ordering);

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;

            if (!string.IsNullOrEmpty(resolveConnectionContext.After))
            {
                offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                hasPreviousPage = offset > 0;
            }

            if (hasPreviousPage) queryable = queryable.Skip(offset);

            if (resolveConnectionContext.First != null)
                queryable = queryable.Take(resolveConnectionContext.First.Value);
            else if (take > -1)
                queryable = queryable.Take(take);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => <#= prefixType +  tableName #>Type.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var edges = await queryable.Select(columnList)
                .OfType<object>()
                .ToAsyncEnumerable()
                .Select(row =>
                {
                    if (row == null) return null;

                    var result = new <#= prefixEntity + tableName #>Entity();

                    var rowType = row.GetType();

                    foreach (var property in columns)
                        property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                    return new <#= prefixProxy + tableName #>Proxy(result);
                })
                .Select((item, i) => new Edge<BaseProxy>
                {
                    Node = item,
                    Cursor = ConnectionUtils.OffsetToCursor(offset + i)
                })
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = edges.Count + offset;
            else if (resolveConnectionContext.First > edges.Count)
                totalCount = edges.Count + offset;

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            if (isEnabledLiquid)
            {
<#
                if (schemaName == "dbo")
                {
#>
                @global[resolveConnectionContext.FieldAst.Alias ?? resolveConnectionContext.FieldAst.Name] = result;
<#
                }
                else
                {
#>
                (@global.GetOrAdd(
                    "<#= ToHuman(schemaName).ToLower() #>",
                    new ConcurrentDictionary<string, object>()) as IDictionary<string, object>)
                    [resolveConnectionContext.FieldAst.Alias ?? resolveConnectionContext.FieldAst.Name] = result;
<#
                }
#>
            }

            return result;
        }
<#
        }
#>
    }
}
<#
    }

    foreach(var table in GetUnicornDefinitions()) 
    {
        var tableName = table.Key.TableName;

        var existedSchema = new HashSet<string>();

        foreach(var relationship in relationships)
        {
            var isParent = string.Equals(relationship.Start.Name, tableName, StringComparison.OrdinalIgnoreCase);
            var isChild = string.Equals(relationship.End.Name, tableName, StringComparison.OrdinalIgnoreCase);

            if (!isParent && !isChild) continue;

            foreach(var schema in new [] { relationship.Start.Schema, relationship.End.Schema})
            {
                if (schema == "dbo" || existedSchema.Contains(schema)) continue;

                existedSchema.Add(schema);
#>

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    public sealed partial class <#= tableName #>_<#= ToPascal(schema) #>Type
    {<#
            foreach(var item in relationships)
            {
                isParent = string.Equals(item.Start.Name, tableName, StringComparison.OrdinalIgnoreCase);
                isChild = string.Equals(item.End.Name, tableName, StringComparison.OrdinalIgnoreCase);

                if (!isParent && !isChild) continue;
                
                var prefixStart = item.Start.Schema == "dbo" ? "" : ToPascal(item.Start.Schema) + ".";
                var prefixEnd = item.End.Schema == "dbo" ? "" : ToPascal(item.End.Schema) + ".";
                var prefixStartEntity = item.Start.Schema == "dbo" ? "" : "Entities." + ToPascal(item.Start.Schema) + ".";
                var prefixStartProxy = item.Start.Schema == "dbo" ? ""  : "Proxies." + ToPascal(item.Start.Schema) + ".";
                var prefixStartNamespace = item.Start.Schema == "dbo" ? "" : ToPascal(item.Start.Schema) + ".";
                var prefixStartType = item.Start.Schema == "dbo" ? "" : "Types." + ToPascal(item.Start.Schema) + ".";
                var prefixEndEntity = item.End.Schema == "dbo" ? "": "Entities." + ToPascal(item.End.Schema) + ".";
                var prefixEndProxy = item.End.Schema == "dbo" ? "" : "Proxies." + ToPascal(item.End.Schema) + ".";
                var prefixEndNamespace = item.End.Schema == "dbo" ? "" : ToPascal(item.End.Schema) + ".";
                var prefixEndType = item.End.Schema == "dbo" ? "" : "Types." + ToPascal(item.End.Schema) + ".";

                if (isParent)
                {
                    if (item.End.Schema == schema)
                    {
#>

        /// <summary>
        /// Resolve <#= ToHuman(item.End.Name).ToLower() #>.
        /// </summary>
        /// <param name="resolveFieldContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> Resolve<#= item.End.Name #>Async(IResolveFieldContext<<#= ToPascal(schema) #>Proxy> resolveFieldContext)
        {
            if (resolveFieldContext == null) throw new ArgumentNullException(nameof(resolveFieldContext));

            var serviceProvider = resolveFieldContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveFieldContext.CancellationToken).ConfigureAwait(false);

            var force = (bool)resolveFieldContext.UserContext["force"];
            var @base = (resolveFieldContext.Source.Source as <#= (item.Start.Schema == "dbo" ? "" : ( "Proxies." + ToPascal(item.Start.Schema) + ".") ) + item.Start.Name #>Proxy);
            var <#= ToCamel(item.Start.Key) #> = @base.<#= item.Start.Key #>;

            var entityType = typeof(<#= prefixEndEntity + item.End.Name #>Entity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

<#
            if (item.Routes == null || item.Routes.Length == 0)
            {
#>
            var queryable =
                from <#= ToCamel(item.End.Name) #>_ in unicornContext.<#= prefixEnd + ToPlural(item.End.Name) #>.AsQueryable()
                where <#= ToCamel(item.End.Name) #>_.<#= item.End.Key #> == <#= ToCamel(item.Start.Key) #>
                select <#= ToCamel(item.End.Name) #>_;
<#
            }
            else
            {
                foreach(var route in item.Routes.Reverse())
                {
#>
            entityTypes.Add(unicornContext.<#= (route.Item1.Schema == "dbo" ? "" : ToPascal(route.Item1.Schema) + ".") + ToPlural(route.Item1.Name) #>.EntityType.ClrType);
<#
                }
#>
            var queryable =
                from <#= ToCamel(item.End.Name) #>_ in unicornContext.<#= prefixEnd + ToPlural(item.End.Name) #>.AsQueryable()
<#
                var lastTable = item.End.Name;
                var lastField = item.End.Key;
                foreach(var route in item.Routes.Reverse())
                {
#>
                join <#= ToCamel(route.Item1.Name) #>_ in unicornContext.<#= (route.Item1.Schema == "dbo" ? "" : ToPascal(route.Item1.Schema) + ".") + ToPlural(route.Item1.Name) #>.AsQueryable()
                on <#= ToCamel(lastTable) #>_.<#= lastField #> equals <#= ToCamel(route.Item1.Name) #>_.<#= route.Item2.Key  #>
<#
                    lastTable = route.Item1.Name;
                    lastField = route.Item1.Key;
                }
#>
                where <#= ToCamel(item.Routes[0].Item1.Name) #>_.<#= item.Routes[0].Item1.Key #> == <#= ToCamel(item.Start.Key) #>
<#
                foreach(var route in item.Routes)
                {
#>
                && (!force || <#= ToCamel(route.Item1.Name) #>_.DeletedDate == null)
<#
                }
#>
                select <#= ToCamel(item.End.Name) #>_;
<#
            }
#>

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            var columns = new HashSet<PropertyInfo>(resolveFieldContext.SubFields.Values
                .SelectMany(_ => <#= prefixEndType + item.End.Name #>Type.DependentFields.GetValueOrDefault(_.Name, Enumerable.Empty<string>()))
                .Select(entityType.GetProperty)
                .Where(_ => _ != null));

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var row = await queryable
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .Select(columnList)
                .OfType<object>()
                .FirstOrDefaultAsync().ConfigureAwait(false);

            if (row == null) return null;

            var result = new <#= prefixEndEntity + item.End.Name #>Entity();

            var rowType = row.GetType();

            foreach (var property in columns)
                property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

            var <#= ToCamel(item.End.Name) #> = new <#= prefixEndProxy + item.End.Name #>Proxy(result) { Base = @base };

            resolveFieldContext.Source["<#= ToCamel(item.End.Name) #>"] = <#= ToCamel(item.End.Name) #>;

            return <#= ToCamel(item.End.Name) #>;
        }
<#
                    }
                }
                if (isChild)
                {
                    if (item.Start.Schema == schema)
                    {

//Begin

            var links = relationships.Where(c => c.Start.Name == tableName).Select(c => c.End.Name).Concat(
                            relationships.Where(c => c.End.Name == tableName).Select(c => c.Start.Name)).Distinct()
                            .ToList();

#>

        /// <summary>
        /// Resolve <#= ToHuman(item.Start.Name).ToLower() #>.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private async Task<object> Resolve<#= ToPlural(item.Start.Name) #>Async(IResolveConnectionContext<<#= ToPascal(schema) #>Proxy> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @base = resolveConnectionContext.Source.Source as <#= (item.End.Schema == "dbo" ? "" : ( "Proxies." + ToPascal(item.End.Schema) + ".") ) + item.End.Name #>Proxy;
            var @global = resolveConnectionContext.UserContext["global"] as IDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
<#
            if (links.Count > 0)
            {
#>
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();
<#
            }
#>

            var force = (bool)resolveConnectionContext.UserContext["force"];

            var entityType = typeof(<#= prefixStartEntity + item.Start.Name #>Entity);

            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var <#= ToCamel(item.End.Key) #> = @base.<#= item.End.Key #>;

<#
            if (item.Routes == null || item.Routes.Length == 0)
            {
#>
            var queryable =
                from <#= ToCamel(item.Start.Name) #>_ in unicornContext.<#= prefixStartNamespace #><#= ToPlural(item.Start.Name) #>.AsQueryable()
                where <#= ToCamel(item.Start.Name) #>_.<#= item.Start.Key #> == <#= ToCamel(item.End.Key) #>
                select <#= ToCamel(item.Start.Name) #>_;
<#
            }
            else
            {
                foreach(var route in item.Routes)
                {
#>
            entityTypes.Add(unicornContext..<#= (route.Item1.Schema == "dbo" ? "" : ToPascal(route.Item1.Schema) + ".") + ToPlural(route.Item1.Name) #>.EntityType.ClrType);
<#
                }
#>
            var queryable =
                from <#= ToCamel(item.Start.Name) #>_ in unicornContext.<#= prefixStartNamespace #><#= ToPlural(item.Start.Name) #>.AsQueryable()
<#
                var lastTable = item.Start.Name;
                var lastField = item.Start.Key;
                foreach(var route in item.Routes)
                {
#>
                join <#= ToCamel(route.Item1.Name) #>_ in unicornContext.<#= (route.Item1.Schema == "dbo" ? "" : ToPascal(route.Item1.Schema) + ".") + ToPlural(route.Item1.Name) #>.AsQueryable()
                on <#= ToCamel(lastTable) #>_.<#= lastField #> equals <#= ToCamel(route.Item1.Name) #>_.<#= route.Item1.Key  #>
<#
                    lastTable = route.Item2.Name;
                    lastField = route.Item2.Key;
                }
#>
                where <#= ToCamel(item.Routes[item.Routes.Length - 1].Item2.Name) #>_.<#= item.Routes[item.Routes.Length - 1].Item2.Key #> == <#= ToCamel(item.End.Key) #>
<#
                foreach(var route in item.Routes)
                {
#>
                && (!force || <#= ToCamel(route.Item1.Name) #>_.DeletedDate == null)
<#
                }
#>
                select <#= ToCamel(item.Start.Name) #>_;
<#
            }

            if (links.Count > 0)
            {
#>

            foreach (var link in links)
            {<#
            }
            foreach (var link in links)
            {
                var node = relationships.FirstOrDefault(c =>
                    c.Start.Name == link && c.End.Name == item.Start.Name ||
                    c.End.Name == link && c.Start.Name == item.Start.Name);

                if (node == null) continue;

                var isSwap = node.Start.Name == item.Start.Name;
#>

                if (link.Key == "<#= ToCamel(link) #>" && link.Value is IDictionary<string, object> <#= ToCamel(link) #>QueryLink)
                {
<#
                do {
                    var nodes = new List<Tuple<Node, Node>>();

                    nodes.Add(isSwap ? Tuple.Create(node.Start, node.Start) : Tuple.Create(node.End, node.End));

                    nodes.AddRange(isSwap ? node.Routes : node.Routes.Select(c => Tuple.Create(c.Item2, c.Item1)).Reverse());

                    nodes.Add(isSwap ? Tuple.Create(node.End, node.End) : Tuple.Create(node.Start, node.Start));

                    for (var index = 1; index < nodes.Count; ++index)
                    {
#>
                        entityTypes.Add(unicornContext.<#= (nodes[index].Item1.Schema == "dbo" ? "" : ToPascal(nodes[index].Item1.Schema) + ".") + ToPlural(nodes[index].Item1.Name) #>.EntityType.ClrType);
<#
                    }
                } while(false);
#>
                    switch (<#= ToCamel(link) #>QueryLink["all"])
                    {
<#
                foreach (var type in new[] {"false", "true"})
                {
#>
                        case <#= type #>:
                            {
<#
                    var nodes = new List<Tuple<Node, Node>>();

                    nodes.Add(isSwap ? Tuple.Create(node.Start, node.Start) : Tuple.Create(node.End, node.End));

                    nodes.AddRange(isSwap ? node.Routes : node.Routes.Select(c => Tuple.Create(c.Item2, c.Item1)).Reverse());

                    nodes.Add(isSwap ? Tuple.Create(node.End, node.End) : Tuple.Create(node.Start, node.Start));

#>
                                var queryableLink = queryable
<#
                            for (var index = 1; index < nodes.Count; ++index)
                            {
#>
                                    .<#= type == "false" ? "Join": "GroupJoin" #>(
                                        unicornContext.<#= (nodes[index].Item1.Schema == "dbo" ? "" : ToPascal(nodes[index].Item1.Schema) + ".") + ToPlural( nodes[index].Item1.Name) #>,
                                        @this => @this<#= index == 1 ? "" : "." + ToCamel(nodes[index - 1].Item2.Name) #>.<#= nodes[index - 1].Item2.Key #>,
                                        that => that.<#= nodes[index].Item1.Key #>,
                                        (@this, that) => new
                                        {
                                            @this<#= index == 1 ? "" : ".@this"  #>,
<#
                                for (var index2 = 2; index2 <= index; ++index2)
                                {
#>
                                            @this.<#= ToCamel(nodes[index2 - 1].Item1.Name) #>,
<#
                                }
#>
                                            <#= ToCamel(nodes[index].Item1.Name) #> = that
                                        })
<#                              if (type != "false")
                                {
#>
                                    .SelectMany(
                                        that => that.<#= ToCamel(nodes[index].Item1.Name) #>.DefaultIfEmpty(),
                                        (@this, that) => new
                                        {
                                            @this<#= index == 1 ? "" : ".@this"  #>,
<#
                                for (var index2 = 2; index2 <= index; ++index2)
                                {
#>
                                            @this.<#= ToCamel(nodes[index2 - 1].Item1.Name) #>,
<#
                                }
#>
                                            <#= ToCamel(nodes[index].Item1.Name) #> = that
                                        })
<#
                                }
                            }
#>
                                    .Select(_ => _);

                                if (<#= ToCamel(link) #>QueryLink.TryGetValue("predicate", out var predicateObj) &&
                                    predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                {
                                    var templateContext = new TemplateContext(templateOptions);

                                    if (isEnabledLiquid)
                                    {
                                        templateContext.SetValue("base", @base);
                                        templateContext.SetValue("global", @global);

                                        predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                        predicateLink = predicateLink?.Trim();
                                    }

                                    if (!string.IsNullOrEmpty(predicateLink))
                                    {
                                        if (<#= ToCamel(link) #>QueryLink.TryGetValue("args", out var argsObj) &&
                                            argsObj is IEnumerable<object> argsLink)
                                            queryableLink = queryableLink.Where(predicateLink, argsLink);
                                        else
                                            queryableLink = queryableLink.Where(predicateLink);
                                    }
                                }

                                queryable = queryableLink.Select(_ => _<#= type == "false" ? "": ".@this" #>.@this);

                                break;
                            }
<#
                }
#>
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                    continue;
                }
<#
            }
            if (links.Count > 0)
            {
#>
            }
<#
            }
#>

            if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

            if (!string.IsNullOrEmpty(predicate))
            {
                var templateContext = new TemplateContext(templateOptions);

                if (isEnabledLiquid)
                {
                    templateContext.SetValue("base", @base);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);

                    predicate = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                    predicate = predicate?.Trim();
                }

                if (!string.IsNullOrEmpty(predicate))
                {
                    if (args == null)
                        queryable = queryable.Where(predicate);
                    else
                        queryable = queryable.Where(predicate, args);
                }
            }

<#
if (links.Count > 0)
{
#>
            if (unique) queryable = queryable.Distinct();
<#
}
#>

            if (!string.IsNullOrEmpty(ordering))
                queryable = queryable.OrderBy(ordering);

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;

            if (!string.IsNullOrEmpty(resolveConnectionContext.After))
            {
                offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                hasPreviousPage = offset > 0;
            }

            if (hasPreviousPage) queryable = queryable.Skip(offset);

            if (resolveConnectionContext.First != null)
                queryable = queryable.Take(resolveConnectionContext.First.Value);
            else if (take > -1)
                queryable = queryable.Take(take);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => <#= prefixStartType + item.Start.Name #>Type.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var edges = await queryable.Select(columnList)
                .OfType<object>()
                .ToAsyncEnumerable()
                .Select(row =>
                {
                    if (row == null) return null;

                    var result = new <#= prefixStartEntity + item.Start.Name #>Entity();

                    var rowType = row.GetType();

                    foreach (var property in columns)
                        property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                    return new <#= prefixStartProxy + item.Start.Name #>Proxy(result) { Base = @base };
                })
                .Select((item, i) => new Edge<BaseProxy>
                {
                    Node = item,
                    Cursor = ConnectionUtils.OffsetToCursor(offset + i)
                })
                .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = edges.Count + offset;
            else if (resolveConnectionContext.First > edges.Count)
                totalCount = edges.Count + offset;

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            resolveConnectionContext.Source["<#= ToPlural(ToCamel(item.Start.Name))#>"] = result;

            return result;
        }
<#
                    }
                }
            }
#>
    }
}
<#
            }
            
        }
    }
#>