

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated.
// 
using System;
using System.Linq;
using System.Diagnostics.CodeAnalysis;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Contoso.Unicorn.GraphQL.Attributes;
using GraphQL.Types;
using Contoso.Unicorn.GraphQL.Proxies;

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition query type of category.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [SuppressMessage("ReSharper", "AccessToDisposedClosure")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public sealed partial class CategoryType : BaseProxyType<CategoryProxy>
    {
        /// <summary>
        /// Required fields
        /// </summary>
        public static readonly Dictionary<string, IEnumerable<string>> DependentFields = new Dictionary<string, IEnumerable<string>>(StringComparer.InvariantCultureIgnoreCase)
        {
            { "CategoryId", new [] { "CategoryId" } },
            { "CategoryName", new [] { "CategoryName" } },
            { "Description", new [] { "Description" } },
            { "Product", new [] { "Id" } },
            { "CreatedDate", new [] { "CreatedDate" } },
            { "ModifiedDate", new [] { "ModifiedDate" } },
            { "DeletedDate", new [] { "DeletedDate" } },
            { "State", new [] { "State" } }
        };

        /// <inheritdoc />
        public CategoryType() : base("Category")
        {
            Description = "category";

            Field(_ => _.CategoryName).Description("Gets category name.");

            Field(_ => _.Description).Description("Gets description.");

            Connection<ProductType>()
                .Name("products")
                .Description("Query many product base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<CategoryLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", " Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveProductsAsync);

            var methods = GetType().GetMethods()
                .Where(m => m.GetCustomAttributes(typeof(ConstructorAttribute), false).Length > 0);

            foreach (var item in methods) item.Invoke(this, null);
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition query type of customer.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [SuppressMessage("ReSharper", "AccessToDisposedClosure")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public sealed partial class CustomerType : BaseProxyType<CustomerProxy>
    {
        /// <summary>
        /// Required fields
        /// </summary>
        public static readonly Dictionary<string, IEnumerable<string>> DependentFields = new Dictionary<string, IEnumerable<string>>(StringComparer.InvariantCultureIgnoreCase)
        {
            { "CustomerId", new [] { "CustomerId" } },
            { "CompanyName", new [] { "CompanyName" } },
            { "ContactName", new [] { "ContactName" } },
            { "ContactTitle", new [] { "ContactTitle" } },
            { "Address", new [] { "Address" } },
            { "City", new [] { "City" } },
            { "Region", new [] { "Region" } },
            { "Postalcode", new [] { "Postalcode" } },
            { "Country", new [] { "Country" } },
            { "Phone", new [] { "Phone" } },
            { "Fax", new [] { "Fax" } },
            { "Order", new [] { "Id" } },
            { "CreatedDate", new [] { "CreatedDate" } },
            { "ModifiedDate", new [] { "ModifiedDate" } },
            { "DeletedDate", new [] { "DeletedDate" } },
            { "State", new [] { "State" } }
        };

        /// <inheritdoc />
        public CustomerType() : base("Customer")
        {
            Description = "customer";

            Field(_ => _.CompanyName).Description("Gets company name.");

            Field(_ => _.ContactName).Description("Gets contact name.");

            Field(_ => _.ContactTitle).Description("Gets contact title.");

            Field(_ => _.Address).Description("Gets address.");

            Field(_ => _.City).Description("Gets city.");

            Field(_ => _.Region, true).Description("Gets region.");

            Field(_ => _.Postalcode, true).Description("Gets postalcode.");

            Field(_ => _.Country).Description("Gets country.");

            Field(_ => _.Phone).Description("Gets phone.");

            Field(_ => _.Fax, true).Description("Gets fax.");

            Connection<OrderType>()
                .Name("orders")
                .Description("Query many order base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<CustomerLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", " Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveOrdersAsync);

            var methods = GetType().GetMethods()
                .Where(m => m.GetCustomAttributes(typeof(ConstructorAttribute), false).Length > 0);

            foreach (var item in methods) item.Invoke(this, null);
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition query type of employee.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [SuppressMessage("ReSharper", "AccessToDisposedClosure")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public sealed partial class EmployeeType : BaseProxyType<EmployeeProxy>
    {
        /// <summary>
        /// Required fields
        /// </summary>
        public static readonly Dictionary<string, IEnumerable<string>> DependentFields = new Dictionary<string, IEnumerable<string>>(StringComparer.InvariantCultureIgnoreCase)
        {
            { "EmployeeId", new [] { "EmployeeId" } },
            { "FirstName", new [] { "FirstName" } },
            { "LastName", new [] { "LastName" } },
            { "Title", new [] { "Title" } },
            { "TitleofCourtesy", new [] { "TitleofCourtesy" } },
            { "BirthDate", new [] { "BirthDate" } },
            { "HireDate", new [] { "HireDate" } },
            { "Address", new [] { "Address" } },
            { "City", new [] { "City" } },
            { "Region", new [] { "Region" } },
            { "PostalCode", new [] { "PostalCode" } },
            { "Country", new [] { "Country" } },
            { "Phone", new [] { "Phone" } },
            { "ManagerId", new [] { "ManagerId" } },
            { "Employee", new [] { "ManagerId" } },
            { "Order", new [] { "Id" } },
            { "CreatedDate", new [] { "CreatedDate" } },
            { "ModifiedDate", new [] { "ModifiedDate" } },
            { "DeletedDate", new [] { "DeletedDate" } },
            { "State", new [] { "State" } }
        };

        /// <inheritdoc />
        public EmployeeType() : base("Employee")
        {
            Description = "employee";

            Field(_ => _.FirstName).Description("Gets first name.");

            Field(_ => _.LastName).Description("Gets last name.");

            Field(_ => _.Title).Description("Gets title.");

            Field(_ => _.TitleofCourtesy).Description("Gets titleof courtesy.");

            Field(_ => _.BirthDate).Description("Gets birth date.");

            Field(_ => _.HireDate).Description("Gets hire date.");

            Field(_ => _.Address).Description("Gets address.");

            Field(_ => _.City).Description("Gets city.");

            Field(_ => _.Region, true).Description("Gets region.");

            Field(_ => _.PostalCode, true).Description("Gets postal code.");

            Field(_ => _.Country).Description("Gets country.");

            Field(_ => _.Phone).Description("Gets phone.");

            Field(_ => _.ManagerId, true).Description("Gets manager id.");

            FieldAsync<EmployeeType>("employee", resolve: ResolveEmployeeAsync, description: "Gets employee.");

            Connection<EmployeeType>()
                .Name("employees")
                .Description("Query many employee base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<EmployeeLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", " Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveEmployeesAsync);

            Connection<OrderType>()
                .Name("orders")
                .Description("Query many order base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<EmployeeLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", " Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveOrdersAsync);

            var methods = GetType().GetMethods()
                .Where(m => m.GetCustomAttributes(typeof(ConstructorAttribute), false).Length > 0);

            foreach (var item in methods) item.Invoke(this, null);
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition query type of order.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [SuppressMessage("ReSharper", "AccessToDisposedClosure")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public sealed partial class OrderType : BaseProxyType<OrderProxy>
    {
        /// <summary>
        /// Required fields
        /// </summary>
        public static readonly Dictionary<string, IEnumerable<string>> DependentFields = new Dictionary<string, IEnumerable<string>>(StringComparer.InvariantCultureIgnoreCase)
        {
            { "OrderId", new [] { "OrderId" } },
            { "CustomerId", new [] { "CustomerId" } },
            { "EmployeeId", new [] { "EmployeeId" } },
            { "OrderDate", new [] { "OrderDate" } },
            { "RequiredDate", new [] { "RequiredDate" } },
            { "ShippedDate", new [] { "ShippedDate" } },
            { "ShipperId", new [] { "ShipperId" } },
            { "Freight", new [] { "Freight" } },
            { "ShipName", new [] { "ShipName" } },
            { "ShipAddress", new [] { "ShipAddress" } },
            { "ShipCity", new [] { "ShipCity" } },
            { "ShipRegion", new [] { "ShipRegion" } },
            { "ShipPostalCode", new [] { "ShipPostalCode" } },
            { "ShipCountry", new [] { "ShipCountry" } },
            { "Customer", new [] { "CustomerId" } },
            { "Employee", new [] { "EmployeeId" } },
            { "Shipper", new [] { "ShipperId" } },
            { "OrderDetail", new [] { "Id" } },
            { "CreatedDate", new [] { "CreatedDate" } },
            { "ModifiedDate", new [] { "ModifiedDate" } },
            { "DeletedDate", new [] { "DeletedDate" } },
            { "State", new [] { "State" } }
        };

        /// <inheritdoc />
        public OrderType() : base("Order")
        {
            Description = "order";

            Field(_ => _.CustomerId, true).Description("Gets customer id.");

            Field(_ => _.EmployeeId).Description("Gets employee id.");

            Field(_ => _.OrderDate).Description("Gets order date.");

            Field(_ => _.RequiredDate).Description("Gets required date.");

            Field(_ => _.ShippedDate, true).Description("Gets shipped date.");

            Field(_ => _.ShipperId).Description("Gets shipper id.");

            Field(_ => _.Freight).Description("Gets freight.");

            Field(_ => _.ShipName).Description("Gets ship name.");

            Field(_ => _.ShipAddress).Description("Gets ship address.");

            Field(_ => _.ShipCity).Description("Gets ship city.");

            Field(_ => _.ShipRegion, true).Description("Gets ship region.");

            Field(_ => _.ShipPostalCode, true).Description("Gets ship postal code.");

            Field(_ => _.ShipCountry).Description("Gets ship country.");

            FieldAsync<CustomerType>("customer", resolve: ResolveCustomerAsync, description: "Gets customer.");

            FieldAsync<EmployeeType>("employee", resolve: ResolveEmployeeAsync, description: "Gets employee.");

            FieldAsync<ShipperType>("shipper", resolve: ResolveShipperAsync, description: "Gets shipper.");

            Connection<OrderDetailType>()
                .Name("orderDetails")
                .Description("Query many order detail base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<OrderLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", " Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveOrderDetailsAsync);

            var methods = GetType().GetMethods()
                .Where(m => m.GetCustomAttributes(typeof(ConstructorAttribute), false).Length > 0);

            foreach (var item in methods) item.Invoke(this, null);
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition query type of order detail.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [SuppressMessage("ReSharper", "AccessToDisposedClosure")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public sealed partial class OrderDetailType : BaseProxyType<OrderDetailProxy>
    {
        /// <summary>
        /// Required fields
        /// </summary>
        public static readonly Dictionary<string, IEnumerable<string>> DependentFields = new Dictionary<string, IEnumerable<string>>(StringComparer.InvariantCultureIgnoreCase)
        {
            { "OrderDetailId", new [] { "OrderDetailId" } },
            { "OrderId", new [] { "OrderId" } },
            { "ProductId", new [] { "ProductId" } },
            { "UnitPrice", new [] { "UnitPrice" } },
            { "Quality", new [] { "Quality" } },
            { "Discount", new [] { "Discount" } },
            { "Order", new [] { "OrderId" } },
            { "Product", new [] { "ProductId" } },
            { "CreatedDate", new [] { "CreatedDate" } },
            { "ModifiedDate", new [] { "ModifiedDate" } },
            { "DeletedDate", new [] { "DeletedDate" } },
            { "State", new [] { "State" } }
        };

        /// <inheritdoc />
        public OrderDetailType() : base("OrderDetail")
        {
            Description = "order detail";

            Field(_ => _.OrderId).Description("Gets order id.");

            Field(_ => _.ProductId).Description("Gets product id.");

            Field(_ => _.UnitPrice).Description("Gets unit price.");

            Field(_ => _.Quality).Description("Gets quality.");

            Field(_ => _.Discount).Description("Gets discount.");

            FieldAsync<OrderType>("order", resolve: ResolveOrderAsync, description: "Gets order.");

            FieldAsync<ProductType>("product", resolve: ResolveProductAsync, description: "Gets product.");

            var methods = GetType().GetMethods()
                .Where(m => m.GetCustomAttributes(typeof(ConstructorAttribute), false).Length > 0);

            foreach (var item in methods) item.Invoke(this, null);
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition query type of product.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [SuppressMessage("ReSharper", "AccessToDisposedClosure")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public sealed partial class ProductType : BaseProxyType<ProductProxy>
    {
        /// <summary>
        /// Required fields
        /// </summary>
        public static readonly Dictionary<string, IEnumerable<string>> DependentFields = new Dictionary<string, IEnumerable<string>>(StringComparer.InvariantCultureIgnoreCase)
        {
            { "ProductId", new [] { "ProductId" } },
            { "ProductName", new [] { "ProductName" } },
            { "SupplierId", new [] { "SupplierId" } },
            { "CategoryId", new [] { "CategoryId" } },
            { "UnitPrice", new [] { "UnitPrice" } },
            { "IsDiscontinued", new [] { "IsDiscontinued" } },
            { "Supplier", new [] { "SupplierId" } },
            { "Category", new [] { "CategoryId" } },
            { "OrderDetail", new [] { "Id" } },
            { "CreatedDate", new [] { "CreatedDate" } },
            { "ModifiedDate", new [] { "ModifiedDate" } },
            { "DeletedDate", new [] { "DeletedDate" } },
            { "State", new [] { "State" } }
        };

        /// <inheritdoc />
        public ProductType() : base("Product")
        {
            Description = "product";

            Field(_ => _.ProductName).Description("Gets product name.");

            Field(_ => _.SupplierId).Description("Gets supplier id.");

            Field(_ => _.CategoryId).Description("Gets category id.");

            Field(_ => _.UnitPrice).Description("Gets unit price.");

            Field(_ => _.IsDiscontinued).Description("Gets is discontinued.");

            FieldAsync<SupplierType>("supplier", resolve: ResolveSupplierAsync, description: "Gets supplier.");

            FieldAsync<CategoryType>("category", resolve: ResolveCategoryAsync, description: "Gets category.");

            Connection<OrderDetailType>()
                .Name("orderDetails")
                .Description("Query many order detail base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<ProductLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", " Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveOrderDetailsAsync);

            var methods = GetType().GetMethods()
                .Where(m => m.GetCustomAttributes(typeof(ConstructorAttribute), false).Length > 0);

            foreach (var item in methods) item.Invoke(this, null);
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition query type of shipper.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [SuppressMessage("ReSharper", "AccessToDisposedClosure")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public sealed partial class ShipperType : BaseProxyType<ShipperProxy>
    {
        /// <summary>
        /// Required fields
        /// </summary>
        public static readonly Dictionary<string, IEnumerable<string>> DependentFields = new Dictionary<string, IEnumerable<string>>(StringComparer.InvariantCultureIgnoreCase)
        {
            { "ShipperId", new [] { "ShipperId" } },
            { "CompanyName", new [] { "CompanyName" } },
            { "Phone", new [] { "Phone" } },
            { "Order", new [] { "Id" } },
            { "CreatedDate", new [] { "CreatedDate" } },
            { "ModifiedDate", new [] { "ModifiedDate" } },
            { "DeletedDate", new [] { "DeletedDate" } },
            { "State", new [] { "State" } }
        };

        /// <inheritdoc />
        public ShipperType() : base("Shipper")
        {
            Description = "shipper";

            Field(_ => _.CompanyName).Description("Gets company name.");

            Field(_ => _.Phone).Description("Gets phone.");

            Connection<OrderType>()
                .Name("orders")
                .Description("Query many order base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<ShipperLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", " Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveOrdersAsync);

            var methods = GetType().GetMethods()
                .Where(m => m.GetCustomAttributes(typeof(ConstructorAttribute), false).Length > 0);

            foreach (var item in methods) item.Invoke(this, null);
        }
    }
}

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Types
{
    /// <summary>
    /// Definition query type of supplier.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [SuppressMessage("ReSharper", "AccessToDisposedClosure")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public sealed partial class SupplierType : BaseProxyType<SupplierProxy>
    {
        /// <summary>
        /// Required fields
        /// </summary>
        public static readonly Dictionary<string, IEnumerable<string>> DependentFields = new Dictionary<string, IEnumerable<string>>(StringComparer.InvariantCultureIgnoreCase)
        {
            { "SupplierId", new [] { "SupplierId" } },
            { "CompanyName", new [] { "CompanyName" } },
            { "ContactName", new [] { "ContactName" } },
            { "ContactTitle", new [] { "ContactTitle" } },
            { "Address", new [] { "Address" } },
            { "City", new [] { "City" } },
            { "Region", new [] { "Region" } },
            { "PostalCode", new [] { "PostalCode" } },
            { "Country", new [] { "Country" } },
            { "Phone", new [] { "Phone" } },
            { "Fax", new [] { "Fax" } },
            { "Product", new [] { "Id" } },
            { "CreatedDate", new [] { "CreatedDate" } },
            { "ModifiedDate", new [] { "ModifiedDate" } },
            { "DeletedDate", new [] { "DeletedDate" } },
            { "State", new [] { "State" } }
        };

        /// <inheritdoc />
        public SupplierType() : base("Supplier")
        {
            Description = "supplier";

            Field(_ => _.CompanyName).Description("Gets company name.");

            Field(_ => _.ContactName).Description("Gets contact name.");

            Field(_ => _.ContactTitle).Description("Gets contact title.");

            Field(_ => _.Address).Description("Gets address.");

            Field(_ => _.City).Description("Gets city.");

            Field(_ => _.Region, true).Description("Gets region.");

            Field(_ => _.PostalCode, true).Description("Gets postal code.");

            Field(_ => _.Country).Description("Gets country.");

            Field(_ => _.Phone).Description("Gets phone.");

            Field(_ => _.Fax, true).Description("Gets fax.");

            Connection<ProductType>()
                .Name("products")
                .Description("Query many product base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<SupplierLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", " Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveProductsAsync);

            var methods = GetType().GetMethods()
                .Where(m => m.GetCustomAttributes(typeof(ConstructorAttribute), false).Length > 0);

            foreach (var item in methods) item.Invoke(this, null);
        }
    }
}
