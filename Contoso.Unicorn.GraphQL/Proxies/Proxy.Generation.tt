<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Globalization" #>
<#@ include file="..\..\Configure.tt" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated.
// 
using System;
using System.Diagnostics.CodeAnalysis;
using System.CodeDom.Compiler;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Reflection;
using Contoso.Unicorn.Entities;

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Proxies
{
    /// <summary>
    /// Definition of table BaseProxy.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    public class AbstractProxy
    {
        private readonly IDictionary<string, object> _dictionary =
            new ConcurrentDictionary<string, object>(System.StringComparer.InvariantCultureIgnoreCase);

        /// <summary>
        /// Gets or sets value base index.
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public object this[string index]
        {
            get
            {
                var temp = GetType().GetProperty(index,
                    BindingFlags.GetProperty | BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
                return temp != null ? temp.GetValue(this) : _dictionary[index];
            }
            set
            {
                var temp = GetType().GetProperty(index,
                    BindingFlags.SetProperty | BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase);
                if (temp != null) temp.SetValue(this, value);
                else _dictionary[index] = value;
            }
        }
    }

    /// <summary>
    /// Definition of table BaseProxy.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    public partial class BaseProxy : AbstractProxy, IEquatable<BaseProxy>
    {
        /// <summary>
        /// Construct base proxy.
        /// </summary>
        /// <param name="entity">Entity.</param>
        public BaseProxy(BaseEntity entity) => Entity = entity;

        /// <summary>
        /// Gets entity.
        /// </summary>
        public BaseEntity Entity { get; }

        /// <summary>
        /// Gets or sets id.
        /// </summary>
        public virtual string Id
        {
            get => Entity.Id;
            set => Entity.Id = value;
        }

        /// <summary>
        /// Gets or sets created date.
        /// </summary>
        public virtual System.DateTimeOffset CreatedDate
        {
            get => Entity.CreatedDate;
            set => Entity.CreatedDate = value;
        }

        /// <summary>
        /// Gets or sets modified date.
        /// </summary>
        public virtual System.DateTimeOffset? ModifiedDate
        {
            get => Entity.ModifiedDate;
            set => Entity.ModifiedDate = value;
        }

        /// <summary>
        /// Gets or sets deleted date.
        /// </summary>
        public virtual System.DateTimeOffset? DeletedDate
        {
            get => Entity.DeletedDate;
            set => Entity.DeletedDate = value;
        }

        /// <summary>
        /// Gets or sets state.
        /// </summary>
        public virtual string State
        {
            get => Entity.State;
            set => Entity.State = value;
        }

        /// <summary>
        /// Gets or sets base.
        /// </summary>
        public virtual BaseProxy Base { get; set; }

        /// <inheritdoc />
        public bool Equals(BaseProxy other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;
            return Id.Equals(other.Id);
        }

        /// <inheritdoc />
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((BaseProxy) obj);
        }

        /// <inheritdoc />
        public override int GetHashCode() => Entity.GetHashCode();
    }
}
<#
    foreach(var table in GetUnicornDefinitions()) 
    {
        var tableName = table.Key.TableName;
        var schemaName = table.Key.SchemaName;
#>

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Proxies<#= schemaName == "dbo" ? "" : "." + ToPascal(schemaName)#>
{
    /// <summary>
    /// Definition of table <#= ToHuman(tableName).ToLower() #>.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public partial class <#= tableName #>Proxy : BaseProxy
    {
        private readonly <#= schemaName == "dbo" ? "" : "Entities." + ToPascal(schemaName) + "."#><#= tableName #>Entity _entity;

        /// <inheritdoc />
        public <#= tableName #>Proxy(<#= schemaName == "dbo" ? "" : "Entities." + ToPascal(schemaName) + "."#><#= tableName #>Entity entity) : base(entity) => _entity = entity;
<#
        foreach(var column in table)
        {

            var columnName = column["ColumnName"].ToString();

            if (columnName.Contains(" ")) continue;

            var dataType = column["DataType"].ToString();
            var type = ConvertSqlTypeToDotNetType(dataType, (bool)column["IsNullable"]); 
                   
            if (IsSkip(columnName)) continue;
#>

        /// <summary>
        /// Gets or sets value from column [<#= columnName #>].
        /// </summary>
        public virtual <#= type #> <#= columnName #>
        {
            get => _entity.<#= columnName #>;
            set => _entity.<#= columnName #> = value;
        }
<#
        }
#>    }
}
<#
    }
    
    foreach(var schema in GetUnicornDefinitions().SelectMany(c => c).GroupBy(c => c["SchemaName"]))
    {
        var schemaName = schema.Key.ToString();

        if (schemaName == "dbo") continue;
#>

// ReSharper disable once IdentifierTypo
namespace Contoso.Unicorn.GraphQL.Proxies
{
    /// <summary>
    /// Definition type of schema <#= ToHuman(schemaName).ToLower() #>.
    /// </summary>
    [SuppressMessage("ReSharper", "UnusedMember.Global")]
    [SuppressMessage("ReSharper", "MemberHidesStaticFromOuterClass")]
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    [SuppressMessage("ReSharper", "PartialTypeWithSinglePart")]
    [SuppressMessage("ReSharper", "AccessToDisposedClosure")]
    [GeneratedCode("TextTemplatingFileGenerator", "1.0.0")]
    public partial class <#= ToPascal(schemaName) #>Proxy : AbstractProxy
    {
        /// <summary>
        /// Construct proxy.
        /// </summary>
        /// <param name="source">Source.</param>
        public <#= ToPascal(schemaName) #>Proxy(BaseProxy source = null)
        {
            Source = source;
        }

        /// <summary>
        /// Gets or sets value from column [<#= schemaName #>].
        /// </summary>
        public BaseProxy Source { get; set; }
    }
}
<#
    }
#>