

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated.
// 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic.Core;
using System.Reflection;
using System.Threading.Tasks;
using Contoso.Unicorn.Entities;
using Contoso.Unicorn.GraphQL.Types;
using Fluid;
using GraphQL;
using GraphQL.Builders;
using GraphQL.Relay.Types;
using Microsoft.Extensions.DependencyInjection;
using GraphQL.Language.AST;
using GraphQL.Types.Relay.DataObjects;
using Contoso.Unicorn.GraphQL.Proxies;
using System.Collections.Concurrent;
using Microsoft.EntityFrameworkCore;
using Z.EntityFramework.Plus;
using Contoso.EFCore;

namespace Contoso.Unicorn.GraphQL.Queries
{
    /// <inheritdoc />
    public partial class UnicornQuery
    {
        /// <summary>
        /// Resolve category.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private static async Task<object> ResolveCategoriesAsync(IResolveConnectionContext<object> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(CategoryEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => CategoryType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            do
            {
                var queryable = unicornContext.Categories.AsQueryable();

                foreach (var link in links)
                {
                    if (link.Key == "product" && link.Value is IDictionary<string, object> productQueryLink)
                    {

                        entityTypes.Add(unicornContext.Products.EntityType.ClrType);

                        switch (productQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Products,
                                            @this => @this.Id,
                                            that => that.CategoryId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                product = that
                                        })
                                        .Select(_ => _);

                                    if (productQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (productQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Products,
                                            @this => @this.Id,
                                            that => that.CategoryId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                product = that
                                        })
                                        .SelectMany(
                                            that => that.product.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                product = that
                                            })
                                        .Select(_ => _);

                                    if (productQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (productQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }
                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object>{ { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                    .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                    .Select(columnList)
                    .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);
                
                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new CategoryEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new CategoryProxy(result);
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            if (isEnabledLiquid)
            {
                @global[resolveConnectionContext.FieldAst.Alias ?? resolveConnectionContext.FieldAst.Name] = result;
            }

            return result;
        }

        /// <summary>
        /// Resolve customer.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private static async Task<object> ResolveCustomersAsync(IResolveConnectionContext<object> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(CustomerEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => CustomerType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            do
            {
                var queryable = unicornContext.Customers.AsQueryable();

                foreach (var link in links)
                {
                    if (link.Key == "order" && link.Value is IDictionary<string, object> orderQueryLink)
                    {

                        entityTypes.Add(unicornContext.Orders.EntityType.ClrType);

                        switch (orderQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Orders,
                                            @this => @this.Id,
                                            that => that.CustomerId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                        })
                                        .Select(_ => _);

                                    if (orderQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Orders,
                                            @this => @this.Id,
                                            that => that.CustomerId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                        })
                                        .SelectMany(
                                            that => that.order.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                            })
                                        .Select(_ => _);

                                    if (orderQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }
                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object>{ { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                    .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                    .Select(columnList)
                    .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);
                
                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new CustomerEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new CustomerProxy(result);
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            if (isEnabledLiquid)
            {
                @global[resolveConnectionContext.FieldAst.Alias ?? resolveConnectionContext.FieldAst.Name] = result;
            }

            return result;
        }

        /// <summary>
        /// Resolve employee.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private static async Task<object> ResolveEmployeesAsync(IResolveConnectionContext<object> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(EmployeeEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => EmployeeType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            do
            {
                var queryable = unicornContext.Employees.AsQueryable();

                foreach (var link in links)
                {
                    if (link.Key == "employee" && link.Value is IDictionary<string, object> employeeQueryLink)
                    {

                        entityTypes.Add(unicornContext.Employees.EntityType.ClrType);

                        switch (employeeQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Employees,
                                            @this => @this.ManagerId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                        })
                                        .Select(_ => _);

                                    if (employeeQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (employeeQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Employees,
                                            @this => @this.ManagerId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                        })
                                        .SelectMany(
                                            that => that.employee.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                            })
                                        .Select(_ => _);

                                    if (employeeQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (employeeQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }

                    if (link.Key == "order" && link.Value is IDictionary<string, object> orderQueryLink)
                    {

                        entityTypes.Add(unicornContext.Orders.EntityType.ClrType);

                        switch (orderQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Orders,
                                            @this => @this.Id,
                                            that => that.EmployeeId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                        })
                                        .Select(_ => _);

                                    if (orderQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Orders,
                                            @this => @this.Id,
                                            that => that.EmployeeId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                        })
                                        .SelectMany(
                                            that => that.order.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                            })
                                        .Select(_ => _);

                                    if (orderQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }
                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object>{ { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                    .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                    .Select(columnList)
                    .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);
                
                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new EmployeeEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new EmployeeProxy(result);
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            if (isEnabledLiquid)
            {
                @global[resolveConnectionContext.FieldAst.Alias ?? resolveConnectionContext.FieldAst.Name] = result;
            }

            return result;
        }

        /// <summary>
        /// Resolve order.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private static async Task<object> ResolveOrdersAsync(IResolveConnectionContext<object> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(OrderEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => OrderType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            do
            {
                var queryable = unicornContext.Orders.AsQueryable();

                foreach (var link in links)
                {
                    if (link.Key == "customer" && link.Value is IDictionary<string, object> customerQueryLink)
                    {

                        entityTypes.Add(unicornContext.Customers.EntityType.ClrType);

                        switch (customerQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Customers,
                                            @this => @this.CustomerId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                customer = that
                                        })
                                        .Select(_ => _);

                                    if (customerQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (customerQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Customers,
                                            @this => @this.CustomerId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                customer = that
                                        })
                                        .SelectMany(
                                            that => that.customer.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                customer = that
                                            })
                                        .Select(_ => _);

                                    if (customerQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (customerQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }

                    if (link.Key == "employee" && link.Value is IDictionary<string, object> employeeQueryLink)
                    {

                        entityTypes.Add(unicornContext.Employees.EntityType.ClrType);

                        switch (employeeQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Employees,
                                            @this => @this.EmployeeId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                        })
                                        .Select(_ => _);

                                    if (employeeQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (employeeQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Employees,
                                            @this => @this.EmployeeId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                        })
                                        .SelectMany(
                                            that => that.employee.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                employee = that
                                            })
                                        .Select(_ => _);

                                    if (employeeQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (employeeQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }

                    if (link.Key == "shipper" && link.Value is IDictionary<string, object> shipperQueryLink)
                    {

                        entityTypes.Add(unicornContext.Shippers.EntityType.ClrType);

                        switch (shipperQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Shippers,
                                            @this => @this.ShipperId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                shipper = that
                                        })
                                        .Select(_ => _);

                                    if (shipperQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (shipperQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Shippers,
                                            @this => @this.ShipperId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                shipper = that
                                        })
                                        .SelectMany(
                                            that => that.shipper.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                shipper = that
                                            })
                                        .Select(_ => _);

                                    if (shipperQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (shipperQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }

                    if (link.Key == "orderDetail" && link.Value is IDictionary<string, object> orderDetailQueryLink)
                    {

                        entityTypes.Add(unicornContext.OrderDetails.EntityType.ClrType);

                        switch (orderDetailQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.OrderDetails,
                                            @this => @this.Id,
                                            that => that.OrderId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                orderDetail = that
                                        })
                                        .Select(_ => _);

                                    if (orderDetailQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderDetailQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.OrderDetails,
                                            @this => @this.Id,
                                            that => that.OrderId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                orderDetail = that
                                        })
                                        .SelectMany(
                                            that => that.orderDetail.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                orderDetail = that
                                            })
                                        .Select(_ => _);

                                    if (orderDetailQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderDetailQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }
                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object>{ { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                    .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                    .Select(columnList)
                    .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);
                
                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new OrderEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new OrderProxy(result);
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            if (isEnabledLiquid)
            {
                @global[resolveConnectionContext.FieldAst.Alias ?? resolveConnectionContext.FieldAst.Name] = result;
            }

            return result;
        }

        /// <summary>
        /// Resolve order detail.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private static async Task<object> ResolveOrderDetailsAsync(IResolveConnectionContext<object> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(OrderDetailEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => OrderDetailType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            do
            {
                var queryable = unicornContext.OrderDetails.AsQueryable();

                foreach (var link in links)
                {
                    if (link.Key == "order" && link.Value is IDictionary<string, object> orderQueryLink)
                    {

                        entityTypes.Add(unicornContext.Orders.EntityType.ClrType);

                        switch (orderQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Orders,
                                            @this => @this.OrderId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                        })
                                        .Select(_ => _);

                                    if (orderQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Orders,
                                            @this => @this.OrderId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                        })
                                        .SelectMany(
                                            that => that.order.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                            })
                                        .Select(_ => _);

                                    if (orderQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }

                    if (link.Key == "product" && link.Value is IDictionary<string, object> productQueryLink)
                    {

                        entityTypes.Add(unicornContext.Products.EntityType.ClrType);

                        switch (productQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Products,
                                            @this => @this.ProductId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                product = that
                                        })
                                        .Select(_ => _);

                                    if (productQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (productQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Products,
                                            @this => @this.ProductId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                product = that
                                        })
                                        .SelectMany(
                                            that => that.product.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                product = that
                                            })
                                        .Select(_ => _);

                                    if (productQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (productQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }
                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object>{ { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                    .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                    .Select(columnList)
                    .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);
                
                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new OrderDetailEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new OrderDetailProxy(result);
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            if (isEnabledLiquid)
            {
                @global[resolveConnectionContext.FieldAst.Alias ?? resolveConnectionContext.FieldAst.Name] = result;
            }

            return result;
        }

        /// <summary>
        /// Resolve product.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private static async Task<object> ResolveProductsAsync(IResolveConnectionContext<object> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(ProductEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => ProductType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            do
            {
                var queryable = unicornContext.Products.AsQueryable();

                foreach (var link in links)
                {
                    if (link.Key == "supplier" && link.Value is IDictionary<string, object> supplierQueryLink)
                    {

                        entityTypes.Add(unicornContext.Suppliers.EntityType.ClrType);

                        switch (supplierQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Suppliers,
                                            @this => @this.SupplierId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                supplier = that
                                        })
                                        .Select(_ => _);

                                    if (supplierQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (supplierQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Suppliers,
                                            @this => @this.SupplierId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                supplier = that
                                        })
                                        .SelectMany(
                                            that => that.supplier.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                supplier = that
                                            })
                                        .Select(_ => _);

                                    if (supplierQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (supplierQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }

                    if (link.Key == "category" && link.Value is IDictionary<string, object> categoryQueryLink)
                    {

                        entityTypes.Add(unicornContext.Categories.EntityType.ClrType);

                        switch (categoryQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Categories,
                                            @this => @this.CategoryId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                category = that
                                        })
                                        .Select(_ => _);

                                    if (categoryQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (categoryQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Categories,
                                            @this => @this.CategoryId,
                                            that => that.Id,
                                            (@this, that) => new
                                            {
                                                @this,
                                                category = that
                                        })
                                        .SelectMany(
                                            that => that.category.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                category = that
                                            })
                                        .Select(_ => _);

                                    if (categoryQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (categoryQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }

                    if (link.Key == "orderDetail" && link.Value is IDictionary<string, object> orderDetailQueryLink)
                    {

                        entityTypes.Add(unicornContext.OrderDetails.EntityType.ClrType);

                        switch (orderDetailQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.OrderDetails,
                                            @this => @this.Id,
                                            that => that.ProductId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                orderDetail = that
                                        })
                                        .Select(_ => _);

                                    if (orderDetailQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderDetailQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.OrderDetails,
                                            @this => @this.Id,
                                            that => that.ProductId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                orderDetail = that
                                        })
                                        .SelectMany(
                                            that => that.orderDetail.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                orderDetail = that
                                            })
                                        .Select(_ => _);

                                    if (orderDetailQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderDetailQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }
                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object>{ { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                    .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                    .Select(columnList)
                    .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);
                
                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new ProductEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new ProductProxy(result);
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            if (isEnabledLiquid)
            {
                @global[resolveConnectionContext.FieldAst.Alias ?? resolveConnectionContext.FieldAst.Name] = result;
            }

            return result;
        }

        /// <summary>
        /// Resolve shipper.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private static async Task<object> ResolveShippersAsync(IResolveConnectionContext<object> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(ShipperEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => ShipperType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            do
            {
                var queryable = unicornContext.Shippers.AsQueryable();

                foreach (var link in links)
                {
                    if (link.Key == "order" && link.Value is IDictionary<string, object> orderQueryLink)
                    {

                        entityTypes.Add(unicornContext.Orders.EntityType.ClrType);

                        switch (orderQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Orders,
                                            @this => @this.Id,
                                            that => that.ShipperId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                        })
                                        .Select(_ => _);

                                    if (orderQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Orders,
                                            @this => @this.Id,
                                            that => that.ShipperId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                        })
                                        .SelectMany(
                                            that => that.order.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                order = that
                                            })
                                        .Select(_ => _);

                                    if (orderQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (orderQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }
                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object>{ { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                    .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                    .Select(columnList)
                    .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);
                
                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new ShipperEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new ShipperProxy(result);
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            if (isEnabledLiquid)
            {
                @global[resolveConnectionContext.FieldAst.Alias ?? resolveConnectionContext.FieldAst.Name] = result;
            }

            return result;
        }

        /// <summary>
        /// Resolve supplier.
        /// </summary>
        /// <param name="resolveConnectionContext">GraphQL context.</param>
        /// <returns></returns>
        private static async Task<object> ResolveSuppliersAsync(IResolveConnectionContext<object> resolveConnectionContext)
        {
            if (resolveConnectionContext == null) throw new ArgumentNullException(nameof(resolveConnectionContext));

            if (resolveConnectionContext.First < 0) throw new ArgumentOutOfRangeException(nameof(resolveConnectionContext), "context.First is less than 0.");

            if (resolveConnectionContext.Last != null) throw new NotSupportedException("Not support last.");

            if (resolveConnectionContext.Before != null) throw new NotSupportedException("Not support before cursor.");

            var serviceProvider = resolveConnectionContext.UserContext[nameof(ServiceProvider)] as IServiceProvider;

            using var scope = serviceProvider.CreateScope();

            await using var unicornContext = scope.ServiceProvider.GetService<UnicornContext>();

            await using var transaction = await unicornContext.Database.BeginTransactionAsync(System.Data.IsolationLevel.ReadUncommitted, resolveConnectionContext.CancellationToken).ConfigureAwait(false);

            var isEnabledLiquid = (bool)resolveConnectionContext.UserContext["template"];
            var take = (int)resolveConnectionContext.UserContext["paging"];
            var @global = resolveConnectionContext.UserContext["global"] as ConcurrentDictionary<string, object>;
            var predicate = resolveConnectionContext.GetArgument<string>("predicate")?.Trim();
            var ordering = resolveConnectionContext.GetArgument<string>("ordering")?.Trim();
            var args = resolveConnectionContext.GetArgument<object[]>("args");
            var force = (bool)resolveConnectionContext.UserContext["force"];
            var multiple = resolveConnectionContext.GetArgument<bool>("multiple");
            var unique = resolveConnectionContext.GetArgument<bool>("unique");
            var links = (IDictionary<string, object>)resolveConnectionContext.GetArgument<object>("link", new Dictionary<string, object>()) ?? new Dictionary<string, object>();

            var templateOptions = serviceProvider.GetService<TemplateOptions>();
            var fluidParser = new FluidParser();
            fluidParser.RegisterExpressionTag("stop", UnicornSchema.HandleStopTag);

            var entityType = typeof(SupplierEntity);

            var columns = new HashSet<PropertyInfo>();

            if (resolveConnectionContext.SubFields.TryGetValue("items", out var items))
                foreach (var field in items
                    .SelectionSet
                    .Children
                    .OfType<Field>()
                    .SelectMany(_ => SupplierType.DependentFields.TryGetValue(_.Name, out var column) ? column : Enumerable.Empty<string>())
                    .Select(entityType.GetProperty)
                    .Where(_ => _ != null))
                    columns.Add(field);

            columns.Add(entityType.GetProperty(nameof(BaseEntity.Id)));

            var columnList = "new (" + string.Join(", ", columns.Select(_ => _.Name).ToArray()) + ")";

            var hasPreviousPage = false;
            var offset = 0;
            var totalCount = -1;
            var @break = false;
            var loop = 0;
            var entityTypes = new HashSet<Type>();
            entityTypes.Add(entityType);

            var queryables = new LinkedList<QueryFutureEnumerable>();

            do
            {
                var queryable = unicornContext.Suppliers.AsQueryable();

                foreach (var link in links)
                {
                    if (link.Key == "product" && link.Value is IDictionary<string, object> productQueryLink)
                    {

                        entityTypes.Add(unicornContext.Products.EntityType.ClrType);

                        switch (productQueryLink["all"])
                        {
                            case false:
                                {
                                    var queryableLink = queryable
                                        .Join(
                                            unicornContext.Products,
                                            @this => @this.Id,
                                            that => that.SupplierId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                product = that
                                        })
                                        .Select(_ => _);

                                    if (productQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (productQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this);

                                    break;
                                }
                            case true:
                                {
                                    var queryableLink = queryable
                                        .GroupJoin(
                                            unicornContext.Products,
                                            @this => @this.Id,
                                            that => that.SupplierId,
                                            (@this, that) => new
                                            {
                                                @this,
                                                product = that
                                        })
                                        .SelectMany(
                                            that => that.product.DefaultIfEmpty(),
                                            (@this, that) => new
                                            {
                                                @this,
                                                product = that
                                            })
                                        .Select(_ => _);

                                    if (productQueryLink.TryGetValue("predicate", out var predicateObj) &&
                                        predicateObj is string predicateLink && !string.IsNullOrEmpty(predicateLink))
                                    {
                                        var templateContext = new TemplateContext(templateOptions);
                                        templateContext.SetValue("global", @global);
                                        templateContext.SetValue("args", args);
                                        templateContext.SetValue("loop", new Dictionary<string, object>{{"index", loop}});
                                        templateContext.SetValue("stop", false);

                                        if (isEnabledLiquid)
                                        {
                                            predicateLink = await fluidParser.Parse(predicateLink).RenderAsync(templateContext).ConfigureAwait(false);
                                            predicateLink = predicateLink?.Trim();
                                        }

                                        if (!string.IsNullOrEmpty(predicateLink))
                                        {
                                            if (productQueryLink.TryGetValue("args", out var argsObj) &&
                                                argsObj is IEnumerable<object> argsLink)
                                                queryableLink = queryableLink.Where(predicateLink, argsLink.ToArray());
                                            else
                                                queryableLink = queryableLink.Where(predicateLink);
                                        }

                                        @break = templateContext.GetValue("stop").ToBooleanValue();
                                    }

                                    queryable = queryableLink.Select(_ => _.@this.@this);

                                    break;
                                }
                            default:
                                throw new ArgumentOutOfRangeException();
                        }
                        continue;
                    }
                }
                if (!force) queryable = queryable.Where(_ => _.DeletedDate == null);

                var predicateNew = string.Empty;

                if (!string.IsNullOrEmpty(predicate))
                {
                    var templateContext = new TemplateContext(templateOptions);
                    templateContext.SetValue("global", @global);
                    templateContext.SetValue("args", args);
                    templateContext.SetValue("loop", new Dictionary<string, object>{ { "index", loop } });
                    templateContext.SetValue("stop", false);

                    if (isEnabledLiquid)
                    {
                        predicateNew = await fluidParser.Parse(predicate).RenderAsync(templateContext).ConfigureAwait(false);
                        predicateNew = predicateNew?.Trim();
                    }

                    if (!string.IsNullOrEmpty(predicateNew))
                    {
                        if (args == null)
                            queryable = queryable.Where(predicateNew);
                        else
                            queryable = queryable.Where(predicateNew, args);
                    }

                    @break = templateContext.GetValue("stop").ToBooleanValue();
                }

                if (unique && multiple == false) queryable = queryable.Distinct();

                if (!string.IsNullOrEmpty(ordering))
                    queryable = queryable.OrderBy(ordering);

                if (!string.IsNullOrEmpty(resolveConnectionContext.After) && multiple == false)
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) queryable = queryable.Skip(offset);

                if (resolveConnectionContext.First != null && multiple == false)
                    queryable = queryable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    queryable = queryable.Take(take);

                queryables.AddLast(queryable
                    .WithHint(SqlServerTableHintFlags.NOLOCK, entityTypes.ToArray())
                    .Select(columnList)
                    .FutureObject());

                if (multiple && @break) break;

                ++loop;

                resolveConnectionContext.CancellationToken.ThrowIfCancellationRequested();

            } while (multiple);

            var proxies = new LinkedList<BaseProxy>();

            foreach (var queryable in queryables)
            {
                var results = await queryable
                    .ToListAsync(resolveConnectionContext.CancellationToken).ConfigureAwait(false);
                
                foreach (var item in results.Select(row =>
                    {
                        if (row == null) return null;

                        var result = new SupplierEntity();

                        var rowType = row.GetType();

                        foreach (var property in columns)
                            property.SetValue(result, rowType.GetProperty(property.Name)?.GetValue(row));

                        return new SupplierProxy(result);
                    }))
                    proxies.AddLast(item);
            }

            if (multiple)
            {
                IEnumerable<BaseProxy> edgesEnumerable = unique ? proxies.Distinct(EqualityComparer<BaseProxy>.Default) : proxies;

                if (!string.IsNullOrEmpty(resolveConnectionContext.After))
                {
                    offset = ConnectionUtils.CursorToOffset(resolveConnectionContext.After) + 1;
                    hasPreviousPage = offset > 0;
                }

                if (hasPreviousPage && multiple == false) edgesEnumerable = edgesEnumerable.Skip(offset);

                if (resolveConnectionContext.First != null)
                    edgesEnumerable = edgesEnumerable.Take(resolveConnectionContext.First.Value);
                else if (take > -1 && multiple == false)
                    edgesEnumerable = edgesEnumerable.Take(take);

                proxies = new LinkedList<BaseProxy>(edgesEnumerable);
            }

            if (resolveConnectionContext.First == null && take < 0 && totalCount < 0)
                totalCount = proxies.Count + offset;
            else if (resolveConnectionContext.First > proxies.Count)
                totalCount = proxies.Count + offset;

            var edges = proxies.Select((item, i) => new Edge<BaseProxy>
            {
                Node = item,
                Cursor = ConnectionUtils.OffsetToCursor(offset + i)
            }).ToList();

            var result = new Connection<BaseProxy>
            {
                Edges = edges,
                TotalCount = totalCount,
                PageInfo = new PageInfo
                {
                    StartCursor = edges.FirstOrDefault()?.Cursor,
                    EndCursor = edges.LastOrDefault()?.Cursor,
                    HasPreviousPage = hasPreviousPage,
                    HasNextPage = edges.Count == take,
                }
            };

            if (isEnabledLiquid)
            {
                @global[resolveConnectionContext.FieldAst.Alias ?? resolveConnectionContext.FieldAst.Name] = result;
            }

            return result;
        }
    }
}
