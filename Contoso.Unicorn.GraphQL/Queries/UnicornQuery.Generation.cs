

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated.
// 
using System.Linq;
using Contoso.Unicorn.GraphQL.Attributes;
using Contoso.Unicorn.GraphQL.Types;
using GraphQL;
using GraphQL.Relay.Types;
using GraphQL.Types;

namespace Contoso.Unicorn.GraphQL.Queries
{
    /// <inheritdoc />
    [GraphQLAuthorize("default")]
    public partial class UnicornQuery : ObjectGraphType
    {
        /// <inheritdoc />
        public UnicornQuery()
        {
            Name = "Query";

            Connection<CategoryType>()
                .Name("categories")
                .Description("Query category base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<CategoryLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", "Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveCategoriesAsync);

            Connection<CustomerType>()
                .Name("customers")
                .Description("Query customer base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<CustomerLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", "Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveCustomersAsync);

            Connection<EmployeeType>()
                .Name("employees")
                .Description("Query employee base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<EmployeeLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", "Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveEmployeesAsync);

            Connection<OrderType>()
                .Name("orders")
                .Description("Query order base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<OrderLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", "Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveOrdersAsync);

            Connection<OrderDetailType>()
                .Name("orderDetails")
                .Description("Query order detail base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<OrderDetailLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", "Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveOrderDetailsAsync);

            Connection<ProductType>()
                .Name("products")
                .Description("Query product base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<ProductLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", "Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveProductsAsync);

            Connection<ShipperType>()
                .Name("shippers")
                .Description("Query shipper base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<ShipperLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", "Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveShippersAsync);

            Connection<SupplierType>()
                .Name("suppliers")
                .Description("Query supplier base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
                .Argument<SupplierLinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", "Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(ResolveSuppliersAsync);

            Field<NodeInterface>()
                .Name("node")
                .Description("Fetches an object given its global Id")
                .Argument<NonNullGraphType<IdGraphType>>("id", "The global Id of the object")
                .Resolve(context =>
                {
                    var parts = Node.FromGlobalId(context.GetArgument<string>("id"));
                    var node = context.Schema.AllTypes[parts.Type] as IRelayNode<object>;

                    return node.GetById(context, parts.Id);
                });

            var methods = GetType().GetMethods()
                .Where(m => m.GetCustomAttributes(typeof(ConstructorAttribute), false).Length > 0);

            foreach (var item in methods) item.Invoke(this, null);
        }
    }
}
