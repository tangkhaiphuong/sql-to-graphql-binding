<#@ template language="C#" hostspecific="True" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Globalization" #>
<#@ include file="..\..\Configure.tt" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated.
// 
using System.Linq;
using Contoso.Unicorn.GraphQL.Attributes;
using Contoso.Unicorn.GraphQL.Types;
using GraphQL;
using GraphQL.Relay.Types;
using GraphQL.Types;

namespace Contoso.Unicorn.GraphQL.Queries
{
    /// <inheritdoc />
    [GraphQLAuthorize("default")]
    public partial class UnicornQuery : ObjectGraphType
    {
        /// <inheritdoc />
        public UnicornQuery()
        {
            Name = "Query";
<#
        var relationships = GetRelationships(Path.Combine(this.Host.ResolvePath(string.Empty) , @"..\..\Relationship.xml"));

        var linkSet = relationships.Select(c => c.Start.Name).Concat(relationships.Select(c => c.End.Name)).Distinct().OrderBy(c => c).ToHashSet();

        var tables =  GetUnicornDefinitions().ToList();

        foreach(var table in tables) 
        {
            var tableName = table.Key.TableName;
            var schemaName = table.Key.SchemaName;
            if (schemaName != "dbo") continue;
#>

            Connection<<#= tableName #>Type>()
                .Name("<#= ToCamel(ToPlural(tableName)) #>")
                .Description("Query <#= ToHuman(tableName).ToLower() #> base on criteria.")
                .Argument<StringGraphType>("predicate", "An expression string to test each element for a condition")
                .Argument<ListGraphType<StringGraphType>>("args", "An object array that contains zero or more objects to insert into the predicate as parameters. Similar to the way String.Format formats strings that contains elements from the input sequence that satisfy the condition specified by predicate.")
<#if(linkSet.Contains(tableName)) { #>
                .Argument<<#= tableName #>LinkInputType>("link", "Links with other node base on inner/outer.")
                .Argument<BooleanGraphType>("unique", "Returns distinct elements from a sequence.")
<# }#>
                .Argument<BooleanGraphType>("multiple", "Running predicate many time.")
                .Argument<StringGraphType>("ordering", "Sorts the elements of a sequence in ascending or descending order according to a key.")
                .ResolveAsync(Resolve<#= ToPlural(tableName) #>Async);
<#
        }
#>

<#
        foreach(var schema in GetUnicornDefinitions().SelectMany(c => c).GroupBy(c => c["SchemaName"]))
        {
            var schemaName = schema.Key.ToString();

            if (schemaName == "dbo") continue;
#>
            Field<RootQuery<#= ToPascal(schemaName) #>Type>()
                .Name("<#= ToHuman(schemaName).ToLower() #>")
                .Description("Query test schema <#= ToHuman(schemaName).ToLower() #> on criteria.")
                .Resolve(context => new <#= ToPascal(schemaName) #>Proxy());

<#
        }
#>
            Field<NodeInterface>()
                .Name("node")
                .Description("Fetches an object given its global Id")
                .Argument<NonNullGraphType<IdGraphType>>("id", "The global Id of the object")
                .Resolve(context =>
                {
                    var parts = Node.FromGlobalId(context.GetArgument<string>("id"));
                    var node = context.Schema.AllTypes[parts.Type] as IRelayNode<object>;

                    return node.GetById(context, parts.Id);
                });

            var methods = GetType().GetMethods()
                .Where(m => m.GetCustomAttributes(typeof(ConstructorAttribute), false).Length > 0);

            foreach (var item in methods) item.Invoke(this, null);
        }
    }
}
